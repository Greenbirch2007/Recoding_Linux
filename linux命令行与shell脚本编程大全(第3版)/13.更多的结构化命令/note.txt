第１３章　更多的结构化命令

本章内容

for循环语句
until迭代语句使用while语句
循环
重定向循环的输出


本章主要就循环执行一组知道达到某个条件。
循环命令主要有for,while,until

13.1  for命令

重复执行一系列命令在编程中很常见。通常你需要重复一组命令直至达到某个特定条件，比如处理某个目录下的所有文件，系统上的所有用户或是某个文本文件中的所有行


bash shell提供了for命令，允许你创建一个便利一系列值的循环。每次循环都是用其中一个值来执行已经定义好的一组命令。

for var in list
do	
	commands
done

在do和done语句之间输入的命令可以是一条或多条标准的bash shell命令。在这些命令中，$var变量包含着这次迭代对应的当前列表项中的值

１３．１．１　读取列表中的值

for命令最基本的用法就是遍历for命令自身所定义的一系列值

在最后一次迭代后，$test变量的值会在shell脚本的剩余部分一直保持有效。它会一直保持最后一次迭代的值(除非修改了它)

１３．１．２　　读取列表中的复杂值

shell看到了列表值中的单引号并尝试使用它们来定义了一个单独的数据值，有两个解决办法

１．使用转义字符(反斜线)来将单引号转义
２．使用双引号来定义单引号的值

记住，for循环假定每个值都是使用空格分割的。如果有有空格的数据值，就更麻烦

for命令用空格来划分列表中的每个值。如果在单独的数据值中有空格，就必须用双引号将这些值在某个值两边使用双引号时，shell并不会将双引号当成值的一部分

１３．１．３　　从变量读取列表

通常shell脚本遇到的情况是，你将一系列值都集中存储在一个变量中，然后需要遍历变量中的整个列表。也可以通过for命令来完成

$list变量包含了用于迭代的标准文本值列表。代码还是用了另一个赋值语句想$list变量包含的已有列表中添加(或是拼接)了一个值。
这是向变量中存储的已有文本字符串尾部添加文本的一个常用方法

１３．１．４　　从命令读取值

生成列表中所需值的另外一个途径就是使用命令的输出。可以用命令替换来执行的任何能产生输出的命令，然后在for命令中使用该命令的输出
test5代码将文件名赋给变量，文件名中没有加入路径，这要求文件和脚本位于同一个目录中。如果不是的话，你需要使用全路径名(不管是绝对路径还是相对路径)来引用文件位置

13.1.5  更改字段分隔符

造成这个问题的原因是特殊的环境变量IFS，叫做内部字段分隔符
IFS环境变量定义了bash shell用作字符分隔符的一系列字符。默认情况下,bash shell会将下列字符当做字段分隔符

1.空格　　２．　制表符　　３．　换行符



想要在shell脚本中临时改变IFS环境变量的值来限制被bash shell当做字段分隔符的字符。
例如，想修改IFS的值，使其只能识别换行符，就必须
IFS="$\n"

将这个语句加入到脚本中，告诉bash shell在数据值中忽略空格和制表符。对前一个脚本使用这种方法
要注意是在列表中，所以引号必须错开

注意，在处理代码量较大的脚本时，可能在一地方需要修改IFS的值，然后忽略这次修改，在脚本的其他地方继续使用默认值。
一个可参考的安全实践实在改变IFS之前保存原来的IFS值，然后再回复它

IFS.OLD=$IFS
IFS=$'\n'
(在代码中使用新的IFS值)
IFS=$IFS.OLD

假定你要遍历一个文件中用冒号分隔的值(比如在/etc/passwd文件中)你要做的就是将IFS的值设为冒号

IFS=:

如果要指定多个IFS字符，只要将他们在赋值行串起来就可

IFS=$'\n':;"

这个赋值就会将换行符，冒号，分号和双引号作为字段分隔符。如何使用IFS字符解析数据没有任何限制

１３．１．６　　用通配符读取目录

最后，可以用for命令来自动遍历目录中的文件。进行此操作时，必须在文件名或路径名中使用通配符。它会强制shell使用文件扩展匹配。文件扩展匹配是生成匹配指定通配符的文件名或路径名的过程

如果不知道所有的文件名，这个特性在处理目录中的文件时很好用

在linux中，目录名和文件名中包含空格是合法的。要适应这个种情况，应该将$file变量用双引号圈起来。如果不这样做，遇到含有空格的目录名或文件名时就会有错误产生。

在test命令中，bash shell会将额外的单词当做参数，进行造成错误

也可以在for命令中列出多个目录通配符，将目录查找和列表合并进同一个for语句

for语句首先使用了文件匹配来遍历通配符生成的文件列表，然后它会遍历列表中的下一个文件。可以将任意多的通配符放进列表中

警告，注意，你可以在数据列表中放入任何东西。即使文件或目录不存在，for语句也会尝试处理列表中的内容。在处理文件或目录时，在处理之前测试一下文件或目录总是好的


１３．２　　Ｃ语言福鞥个的for命令

１３．２．１　　C语言的for名

C语言的for命令有一个用来指明变量的特定方法，一个必须保持成立才能继续迭代的条件以及另一个在每个迭代中改变变量的方法。当指定的条件不成立时，for循环就会停止。条件等式通过标准的数据度符号定义

for （i=0,i < 10;i++）{
 printf("The next number is %d\n",i);
}


以下是bash中C语言风格的for循环的基本格式

for (( variable assignment ; condition ' iteration process ))
C语言风格的for循环的格式，因为使用了Ｃ语言风格的变量引用方式而不是shell风格的变量引用方式。C语言风格的for如下

for (( a = 1 ; a< 10;a++))
注意，有些部分并没有遵循bash shell标准的for命令：
1.变量复制可以有空格；
２．条件中的变量不以美元符号开头
３．迭代过程的算式未用expr命令格式

for循环通过定义好的变量来迭代执行这些命令。在每次迭代中，$i变量包含了for循环中赋予的值。在每次迭代后，循环的迭代过程会作用在变量上

１３．２．２　　使用多个变量

变量a和b分别用不同的值来初始化并且定义了不同的迭代过程。循环的每次迭代在增加变量a的同时减少了变量b

13.3 while命令

while命令允许定义一个要测试的命令，然后循环执行一组名，只要定义的测试命令返回的是退出状态码是０．它会在每次迭代的一开始测试test命令。在test命令返回非零退出状态码时，while命令会停止执行那组命令

１３．３．１　while的基本格式

while test command
do 
	other commands
done

while命令的关键在于所指定的tgest command的退出状态码必须随着循环中运行的命令而改变。如果退出状态码不发生变化，while循环就将一直不停地进行下去

最常见的test command的用法是用方括号来检查循环命令中用到的shell变量的值


１３．３．２　　使用多个测试命令

while命令允许你在whlie语句行定义多个测试命令。只有最后一个测试命令的退出状态码会被用来决定什么时候结束循环。

13.4 until命令

until命令和wihle命令工作方式正好相反。until命令要求你指定一个通常返回非零退出状态码的测试命令。只有测试命令的退出状态码不为0,bash shell才会执行循环中列出的命令

一旦测试命令返回状态码0，循环就结束了

until test commands
do
	other commands
done

和wile命令类似，你可以在until命令语句中放入多个测试命令。只有最后一个命令的退出状态码决定了bash shell是否执行已经定义的other commands

例子中测试var1变量来决定until循环何时停止。只要该变量的值等于0,until命令就会停止循环。同while命令一样，在until命令中使用多个测试命令时要注意

shell会执行指定的多个测试命令，只有在最后一个命令成立时停止

１３．５　嵌套循环


循环语句可以在循环内使用任意类型的命令，包括其他循环命令。这种循环叫做嵌套循环(nested loop).注意，在使用嵌套循环时，你是在迭代中使用迭代，与命令运行的次数是乘积关系。

这个被嵌套的循环(也称为内部循环，inner loop)会在外部逊汗的每次迭代中遍历一次它所有的值。
注意，两个循环的do和done命令没有任何差别。bash shell知道当第一个done命令执行时是指内部循环而外部循环

在混用循环命令时也一样，比如在while循环内部放置一个for循环

同样，shell能够区分开内部for循环和外部while循环各自的do和done命令
甚至可以混用until和while

１３．６　循环处理文件数据

通常必须遍历存储在文件中的数据。这要求结合两种技术：
１．使用嵌套循环
２．　修改IFS环境遍历

通过修改IFS环境变量，就能强制for命令将文件中的每行都当成单独的一个条目来处理，即便数据中有空格也是如此。一旦从文件中提取出了单独的行，可能需要再次利用循环来提取行中的数据

典型的例子是处理是/etc/passwd文件中的数据。这要求你逐行遍历/etc/passwd文件，并将IFS变量的值改成冒号，这样就能分隔开每行中的各个数据段了

示例脚本使用了两个不同的IFS值来解析数据。第一个IFS值解析出/etc/passwd文件中的单独的行。内部for循环接着将IFS的值修改为冒号，允许你从/etc/passwd的行中解析出单独的值

内部循环会解析出/etc/passwd每行中的各个值。这种方法在处理外部导入电子表格所采用的逗号分隔的数据时很方便

１３．７　控制循环

break命令
continue命令

１３．７．１　break命令

break命令是退出循环的一个简单方法。可以用break命令来退出任意类型的循环，包括while和until循环

１．跳出单个循环
在shell执行break命令时，它会尝试出当前正在执行的循环

for循环通常都会遍历列表中指定的所有值。但当满足if-then的条件时，shell会执行break命令，停止for循环
这种方法同样适用于while和until循环

2. 跳出内部循环

在处理多个循环时，break命令会自动终止你所在的最内层的循环

注意，即使内部循环通过break命令终止了，外部循环依然继续执行

3.跳出外部循环

有时你在内部循环，但需要停止外部循环，break命令接受单个命令行参数值：
break n

其中n指定了要跳出的循环层级。默认情况下，n为１，表明跳出的是当前的循环。如果你将n设为２，break命令就会停止下一级的外不循环

注意，当shell执行了break命令后，外部循环就停止了

１３．７．２　　continue命令

continue命令可以提前中指某次循环中的命令，但并不会完全终止整个循环。可以在循环内部设置shell不执行命令的条件。这里有个在for循环中使用continue命令的例子

记住，当shell执行continue命令时，它会跳过剩余的命令。如果你在其中某个条件里对测试条件变量进行增值，问题就会出现

和break命令一样，continue命令也允许通过命令行参数指定要继续执行哪一级循环:
continue n

其中n定义了要继续的循环层级


13.8  处理循环的输出

最后，在shell脚本中，可以对循环的输出使用管道或重定向。这可以通过在done命令之后添加一个处理命令来实现
shell会将for命令的结果重定向到文件output.txt 中，而不是显示在屏幕上
也可以将for命令的输出传给sort命令


13.9 实例

13.9.1  查找可执行文件

当你从命令行中运行一个程序的时候，linux系统会搜索一系列目录来查找对应的文件。这些目录被定义在环境变量PATH中。如果你想找出系统中有哪些可执行文件可供使用，只需要扫描PATH环境变量中所有的目录即可

首先，创建一个for循环，对环境变量PATH中的目录进行迭代、处理的时候别忘了设置IFS分隔符


现在已经将各个目录存放在变量$folder中，可以使用另一个for循环来迭代特定目录中的所有文件

最后一步是检查各个文件是否具有可执行权限，可以使用if-then测试功能来实现


13.9.2 创建多个用户账户

shell脚本的目录是让系统管理员工作方便
批量创建新用户账户

不用为每个需要创建的新用户账户账户手动输入useradd命令，而是可以将需要添加的新用户账户放在一个文本文件中，然后创建一个简单的脚本进行处理，
这个文本文件的格式如下

userid,user name

创建csv文件，以备shell脚本读取及处理

要读取文件中的数据，的用上一些shell脚本编程技巧。我们将IFS分隔符设置成逗号，并将其放入while语句的条件测试部分。然后使用read命令读取文件中的各行

while IFS=',' read -r userid name

read命令会自动读取.csv文本文件的下一行内容，所以不需要专门再写一个循环来处理。当read命令返回FALSE时(也就是读取完整个文件时),while命令就会退出

要想把数据从文件中送入whlie命令，只需要在while命令尾部使用一个重定向即可


$input变量指向数据文件，并且该变量被作为while命令的重定向数据.

