
第１２章　使用结构化命令

本章内容

使用if-then语句
嵌套if语句
test命令
复合条件测试
使用双方括号和双括号
case命令

许多程序要求对shell脚本中的命令施加一些逻辑流程控制。有一类命令会根据条件使脚本跳过某些命令。这样的命令通常称为结构化命令(structed command)

结构化命令允许你改变程序执行的顺序

１２．１　使用if-then语句

最基本的结构化命令就是if-then

if command
then 
	commands
fi

bash shell的if语句运行if后面的那个命令。如果该命令的退出状态码是０(该命令成功运行)，位于then部分的命令就会被执行。如果该命令的退出状态码是其他值，then部分的命令就不会被执行，bash shell会继续执行脚本中的下一个命令。
fi语句用来表示if-thenm语句到此结束

这个脚本在if采用了pwd命令。如果命令成功结束，echo语句就会显示该文本字符串。

shell执行了if行中的pwd命令。由于退出状态码是0,它就又执行了then部分的echo语句

说明，if-then也有其他的形式

if command;then
  commands
fi

通过把分号放在待求值的命令尾部，就可以将then语句放在同一行上

在then部分，你可以使用不止一条命令。
bash shell会将这些命令当成一个快，如果if语句行的命令的退出状态值为０，所有的命令都会被执行；如果if语句行的命令的退出状态不为０，所有的命令都会被跳过

if语句行使用grep命令在/etc/passwd文件中查找某个用户名当前是否在系统上使用。
如果有用户使用了那个登录名，脚本会显示一些文本信息并列出该用户HOME目录的bash文件

１２．２　if-then-else语句


if command
then 
  command
else 
  command
fi

当if语句中的命令返回退出状态码0时,then部分中的命令会被执行，这个跟普通的if-then语句是一样的。当if语句中的命令返回非零退出状态码时，bash shell会执行else部分中的命令

跟then部分一样，else部分可以包含多条命令。fi语句说明else部分结束了

１２．３　　嵌套if


有时你需要检查脚本代码中多种条件。对此，可以使用嵌套的if-then语句

要检查/etc/passwd文件中是否存在某个用户名以及该用户的目录是否尚在，可以使用嵌套的if-then语句

嵌套的if-then语句位于主if-then-else语句的else代码块中

可以使用elif。

if command1
then
	commands
elif  command2
then 
	more commands
fi

elfi语句行提供了另一个要测试要测试的命令，这类似与原始的if语句行。如果elif后命令的退出状态码是０，则bash会执行第二个then语句部分的命令。

窍门，在elif语句中，紧跟其后的else语句属于elif代码块。它们并不属于之前的if-then代码块

可以将多个elif串起来，形成一个打的if-then-elif嵌套组合

if command1
then 
	command set 1
elif command2
then
	command set 2
elif command3
then 
	command set 3
elif command4
then 
	command set 4
fi


每块命令都会根据是否会返回退出状态码０来咨询来执行。
bash shell会依次执行if语句，只有第一个返回退出状态码０的语句中的then部分会被执行

１２．４　test命令

test命令提供了在if-then语句中测试不同条件的途径。如果test命令中列出的条件成立。
test命令就会退出并返回退出状态码０．这样if-then语句就与其他编程语言中的if-then语句以类似的方式工作
如果条件不成立，test命令就会出并返回非零的退出状态码，这使得if-then语句不会再被执行

test condition

condition是test命令要测试的一系列参数和值。当用在if-then语句中时，test命令可看起来是这样

if test condition
then
	commands
fi

如果不谢test命令的condition部分，它会以非零的退出状态码退出，并执行else语句块


当你加入一个条件时，test命令会测试该条件。例如，可以使用test命令确定变量中是否有内容。

bash shell提供了另一中条件测试方法，无需在if-then语句中声明test命令

if [condition]
then
	commands
fi

方括号定义了测试条件。注意，第一个方括号之后和第二个方括号之前必须加入一个空格，否则会报错
test命令可以判断三类条件：
１．数值比较
２．字符串比较
３．　文件比较

１２．４．１　　数值比较

-eq 相等
-ge 大于或等于
-gt 大于
-le 小于或等于
-lt　小于
-ne 不等于


数值条件测试可以用在数字和变量上。

记住，bash shell只能处理整数。不能在test命令中使用浮点数

１２．４．２　　字符串的比较

-n str1  检查str1的长度是否非０
-z str1 检查str1的长度是否为０

1.字符串相等性

字符串的相等和不等条件很容易辨认，

字符串不等条件也可以判断两个字符串是否有相同的值

记住，在比较字符串的相等性时，比较测试会将所有的标点和大小写情况都考虑在内

２．字符串顺序

要测试一个字符串是否比另一个字符串大是比较复杂的，当要开始测试条件的大于或小于功能时，就会出现两个经常困扰shell程序员的问题

(1)大于号和小于号必须转义，否则shell会把它们当做重定向符号，把字符串值当做文件名；
(2)大于和小于顺序和sort命令所采用的不同


在编写脚本时，第一条可能会导致一个严重问题。

这个脚本只用了大于号，没有出现错误，但结果错了。脚本把大于号解释成了输出重定向。因此，它创建了一个名为hockey的文件。由于重定向的顺利完成，test命令返回了退出状态码为0,if语句便以为所有命令都成功结束了

要解决这个问题，就需要正确转义大于号

第二个问题除非经常处理大小写字母，否则几乎遇不到。
sort命令处理大小写字母的方法与test命令正好相反

在比较测试中，大写字母被认为是小于小于小写字母的。但sort命令恰好相反。
sort命令排序，小写字母会先出现

比较测试中使用的是标准的ASCII顺序，根据每个字符的ASCII数值来决定排序结果。
sort命令使用的是系统的本地化语言设置中定义的排序顺序。
对于英语，本地化设置指定了在排序中小写字母出现在大写字母前

说明，test命令和测试表达式使用标准的数学比较符号来表示字符串比较，而用文本代码来表示数值比较。。
３．字符串大小

-n和-z可以检查一个变量是否含有数据


判断val3变量是否长度为0.这个变量并未在shell脚本中定义过，所以它的字符串长度仍然为0,尽管它未被定义过

技巧，空的和未初始化的变量会对shell脚本测试造成不好的结果
如果不是很确定一个变量的内容，最好在将其用于数值或字符串比较之前先通过-n或-z来测试一下变量是否含有值

１２．４．３　　文件比较

测试linux文件系统上文件和目录的状态

test命令的文件比较功能

比较　　　　　　　　　　　描述

-d file          检查file是否存并是一个目录
-e file          检查file是否存在
-f file          检查file是否存在并是一个文件
-r file          检查file是否存在并可读
-s file          检查file是否存在非空
-w file           检查file是否存在并可写
-x file           检查file是否存在并可执行
-o file           检查file是否存在并属当前用户所有
-G file           检查file是否存在并且默认组与当前用户相同
file1 -nt file2           检查file1是否比file2新
file1 -ot file2         检查file1是否比file2旧

这些测试条件使你能够在shell脚本中检查文件系统中的文件。它们经常出现在需要进行文件访问的脚本中。

１．检查目录
２．检查对象是否存在
３．检查文件
４．检查是否可读
５．检查空文件
6.检查是否可写
７．检查文件是否可以执行
8.检查所属关系
9. 检查默认属组关系
１０．　检查文件日期

-e比较可用于文件和目录。要确定指定对象为文件，必须用-f比较

在尝试从文件中读取数据之前，最好先测试一下文件是否存在，可以使用-r比较测试

/etc/shadow文件含有系统用户加密后的密码，所以它对系统上的普通用户来说是不可读的，
-r比较确定该文件不允许进行读取，因此测试失败，bash shell执行了if-then语句的else部分

应该用-s比较来检查文件是否为空，尤其是不想删除非空文件的时候。要留心的是，当-s比较成功时，说明文件中有数据

-w比较会判断你对文件是否有可写权限。测试脚本不单检查item_name是否存在，是否为文件，还会检查该文件是否有写入权限

如果使用chmod关闭文件文件的用户写入权限，-w测试表达式会返回非零的退出状态码，时间戳不会被写入文件

-x比较是判断特定文件是否有执行权限的一个简单方法。虽然可能大多数命令用不到它，但如果你要在shell脚本中运行大量脚本，就能用到它


-０比较可以测出你是否是文件的属主

-G比较会检查文件的默认组，如果它匹配了用户的默认组，则测试成功。由于-G比较只会检查默认组而非用户所属的所有组，

最后一组方法用来对两个文件的创建日期进行比较。这在编写软件安装脚本时非常有用。有时，你不会愿意安装一个比系统上已有文件还要旧的文件


-nt比较会判定一个文件是否比另一个文件新。如果文件较新，那意味着它的文件创建日期更近。-ot比较会判定一个文件是否比另一个文件旧。如果文件较旧，意味着它的创建日期更早

１２．５　复合条件测试

if-then语句允许你使用布尔逻辑来组合测试。有两种布尔运算符号可用

[ condition1] && [condition2]  逻辑与
[ condition1 ] || [ condition2] 逻辑或

技巧，布尔逻辑是一种能够将可能的返回值简化为TRUE或FALSE的方法

１２．６　if-then 的高级特性

bash shell提供了两项可在if-then语句中使用的高级特性：
１．用于数学表达式的双括号
２．用于高级字符串处理功能的方括号

１２．６．１　　使用双括号

(( expression ))

可以在if语句中用双括号命令，也可以在脚本中的普通命令里使用来赋值

注意，不需要将双括号中表达式里的大于号转义、这是双括号命令提供的另一个高级特性

１２．６．２　使用双方括号

双方括号命令提供了针对字符串比较额高级特性

[[ expression ]]
双方括号里的expression使用了test命令中采用的标准字符串比较。但它提供了test命令未提供的另一个特性--模式匹配(pattern matching)
在模式匹配中，可以定义一个正则表达式来匹配字符串值

在比较双等号(==),双等号将右边的字符串(r*)视为一个模式，并应用模式匹配规则。双方括号命令$USER环境变量进行匹配，看它是否以字母r开头。如果是的话，比较通过，shell会通过then部分的命令

１２．７　case命令

有了case命令，就不需要载写出所有的elif语句来不停地检查同一个变量的值了。
case命令会采用列表格式来检查单个变量的多个值

case variable in 
pattern1 | pattern2) commands1;;
pattern2) comands2;;
*) default commands;
esac

case命令会将指定的变量与不同模式进行比较。如果变量和模式是匹配的，那么shell会执行为该模式指定的命令。可以通过竖线操作符在一行中分隔初多个模式模式。星号会捕捉所有与已知模式不匹配的值。

case命令提供了一个更清晰的方法来为变量每个可能的值指定不同的选项


