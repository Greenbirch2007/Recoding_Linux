

第１１章　构建基本脚本


本章内容

使用多个命令
创建脚本文件
显示消息
使用变量
输入输出重定向
管道
数学运算
退出脚本

１１．１　　使用多个命令

现在基本已经了解如何使用shell的命令行界面提示符来输入命令和查看命令的结果。
shell脚本的关键在于输入多个命令并处理每个命令的结果，甚至需要讲一个命令的记过传给另一个命令。
shell可以让你将多个命令串起来，一次执行完成。如果要两个命令一起运行，可以把它们放在同一行，彼此间用分号隔开

date;who

这就是一个简单的脚本。但是它的缺陷：每次运行之前，你都必须在命令提示符下输入整个命令。可以将这些命令组合成一个简单的文本文件，这就就不需要在命令行中手动输入了。
在需要运行这些命令时，只用运行整个文本文件就行了

１１．２　　创建shell脚本文件

要将shell命令放到文本文件中，首先需要用文本编辑器来创建一个文件，然后将命令输入到文件中

在创建shell脚本文件时，必须在文件的第一行指定要使用的shell，格式如下

#! /bin/bash

在通常的shell脚本中，井号(#)用作注释行。shell并不会处理shell脚本中的注释行。然而，shell脚本文件的第一行是个例外，#后面的惊叹号会告诉shell用哪个shell来运行脚本
#用作注释


shell会通过PATH环境变量来查找命令。
echo $PATH

PATH环境变量被设置成只在一组目录中查找命令。要让shell找到tess脚本，有两个方法
１．将shell脚本文件所在的目录添加到PATH环境变量中
２．在提示符中用绝对或相对文件路径来引用shell脚本文件

技巧，有些linux发行版将$HOME/bin目录添加进了PATH环境变量。它在每个用户的HOME下提供了一个存放文件的地方，shell可以在那里查找要执行的蘑菇了

这里采用路径引用。为了引用当前目录下的文件可以在shell中使用单点操作符
./tess.sh


注意权限问题

在创建tess.sh文件时，umask的值决定了新文件的默认权限设置。由于默认只为０２２
所以系统创建的文件只有文件属主和属组才有读写权限
下一步使用chmod赋予文件属主执行文件啊的权限
chomd u+x tess.sh
或这　chmod 744 tess.sh

11.3 显示消息

大多数shell命令都会产生自己的输出，这些输出会显示在脚本所运行的控制台显示器上。很多时候，你可能想要添加自己的文本消息来告诉脚本用户脚本正在做什么。
可以通过echo命令来实现，如果在echo命令后面加上一个字符串，该命令就能显示初这个文本字符串


echo this is a test

注意，默认情况下不需要使用引号将要显示的文本字符串划定出来。
echo命令可用单引号或双引号来划定文本字符串。如果在字符串中用到了它们，你需要在文本中使用其中以中共引号而用另外一种来将字符串划定出来


可以将echo语句添加到shell脚本中任何需要显示额外信息的地方

如果想把文本字符串和命令输出显示在同一行中，可以用echo语句的-n参数，只要将第一个echo语句改成如下

echo -n 'this is a test'

你需要在字符串的两侧使用引号，保证要显示的字符串尾部有一个空格。命令输出将会在紧接着字符串结束的地方出现。echo命令是shell脚本中与用户交互的重要工具


１１．４　　使用变量

运行shell脚本中的单个命令虽然有用，但是有其自身的限制。
通常你会需要在shell命令使用其他数据来处理信息。这可以通过变量来实现。变量允许你临时性地将信息存储在shell脚本中，以便和脚本中的其他命令一起使用

１１．４．１　　环境变量

你已经看到过linux的一种变量在实际中的应用
shell维护着一组环境变量，用来记录特定的系统信息。比如系统的名称，登录到系统上的用户名，用户的系统ID(也称为UID)，用户的默认主目录以及shell查找程序的搜索路径。
可以用set命令来显示一份完整的当前环境变量列表

set
在脚本中，你可以在环境变量名称之前加上美元符号($)来使用这些环境变量。

$USER,$UID,$HOME环境变量用来显示已经登录用户的有关信息

注意，echo命令中的环境变量会在脚本运行时替换成当前值。另外，在第一个字符串中可以将$USER系统变量放置到双引号中也可以

注意，只要脚本在引号中出现美元符号，它就会以为你在引用一个变量。上面例子中，脚本会尝试显示变量$1(但未定义)，再显示数字５．要显示美元符号你必须在它前面放置一个反斜线

反斜线允许shell脚本将美元符号解读为实际的美元符号，而不是变量。
说明，　你可能见过通过${variable}形式引用的变量。变量名两侧额外的花括号通常用来帮助识别美元符号后的变量名

１１．４．２　　用户变量

除了环境变量,shell脚本还允许在脚本中定义和使用自己的变量。定义变量允许临时存储数据并在整个脚本中使用，从而使shell脚本看起来更像一个真正的计算机程序

用户变量可以是任何字母，数字或下划线组成的文本字符串，长度不超过２０个。
用户变量区分大小写，所以变量Var1和变量var1是不同的。
使用等号将值赋给用户变量。在变量，等号和值之间不能出现空格。比如
var1=10
var2=-57
var3=testing
var4="still more testing"

shell脚本会自动决定变量值的数据类型。在脚本的整个生命周期里,shell脚本中定义的变量会已知保持着它们的值，但在shell脚本结束是会被删除掉

与系统变量类似，用户变量可通过美元符号引用


变量每次引用时都会输出当前赋给它的值。引用一个变量值时需要使用美元符号，而引用变量来对其进行赋值时则不要使用美元符号

在赋值语句中使用value１变量的值时，仍然必须使用美元符号

美元美元符号,shell会将变量名解释为普通的文本字符串，通常这并不是你需要的

１１．４．３　命令替换

shell脚本中最有用的特性之一就是可以从命令输出中提取信息，并将其赋给变量。把输出赋给变量之后，就可以随意在脚本中使用了。这个特性在处理脚本数据时尤为方便

有两种方法可以将命令输出赋给变量
１．反引号字符(`)
2.$()格式

要注意反引号字符，这不是用于字符串的普通的单引号字符
提示，在美式键盘上，它通常和波浪线(~)位于同一键位

命令替换允许你将shell命令的输出赋给变量。它是脚本编程中的一个主要组成部分

要么用一对反引号把整个命令行命令围起来: testing=`date`
要使用$()格式：　testing=$(date)

shell会运行命令替换符号中的命令，并将其输赋给变量testing.注意，赋值等号和命令替换字符之间没有空格。

变量testing获得了date命令的输出，然后使用echo语句显示出它的值。

下面一个例子，在脚本中通过命令替换获得当前日期并用它来生成唯一文件名

today变量是被赋予格式化后的date命令的输出。这是提取日期信息来生成日志文件名常用的一种技术。+%y%m%d格式告诉date命令将日期显示为两位数的年月日的组合

这个脚本将日期值赋给一个变量，之后再将其作为文件名的一部分。文件自身含有目录列表的重定向。运行上面脚本，会在目录中看到一个新文件

目录中出现的日志文件采用$today变量的值作为文件名的一部分。日志文件的内容是/usr/bin目录内容的列表输出。如果脚本在命令在明天运行，日志文件名会是log.190205,就这样为新的一天创建一个新文件

警告，命令替换会创建一个子shell来运行对应的命令。子shell(subshell)是由运行该脚本的shell所创建出来的一个独立的子shell(child shell)。正因如此，由该子shell所执行命令是无法使用脚本中所创建的变量的

在命令行提示符下使用路径./运行命令的话，也会创建出子shell;要是运行命令的时候不加入路径，就不会创建子shell.
如果你使用的是内建的shell命令，并不会涉及子shell.在命令行提示符下运行脚本一定要留心

１１．５　　重定向输入和输出

有时候你想要保存某个命令的输出而不仅仅只是让它显示在显示器上。bash shell提供了几个操作符，可以将命令的输出重定向到另一个位置(比如文件)
重定向可以用于输入，也可以用于输出。可以将文件重定向到命令输入。


本节介了如何在shell脚本中使用重定向


１１．５．１　　输出重定向

最基本的重定向将命令的输出发送到一个文件中。bash shell用大于号(>)来完成这项工作

command > outputfile

之前显示其上出现的命令输出会被保存到指定的输出文件中

date > test6
ls -l test6
cat tes6

重定向操作符创建了一个文件test6(通过默认的umask设置)，并将date命令的输出重定向到该文件中。如果输出文件已经存在了，重定向操作符会用新的文件数据覆盖已有文件

想要将命令的输出追加到已有文件中，比如正在创建一个记录系统上某个操作的日志文件。在这种情况下，可以用双大于号(>>)来追加数据

１１．５．２　　输入重定向

输入重定向和输出重定向正好相反。输入重定向将文件的内容重定向到命令，而非将命令的输出命令重定向到文件。

输入重定向符号是小于号(<)

command < inputfile

一个记忆方法就是：在命令行上，命令总是在左侧，而重定向符号"指向"数据流动的方向

小于号说明数据正在从输入文件流向命令

wc < test6

wc命令可以对数据中的文本进行计数。默认情况下，它会输出３个值：
１．文本的行数
２．文本的词数
３．文本的字节数

通过将文本文件重定向到wc命令，你立刻就可以得到文件中的行，词，字节的计数

还有另外一种输入重定向的方法，称为内联输入重定向(inline input redirection).
这种方法无需使用文件进行重定向，只需要在命令行中制定用于输入重定向的数据就可以了。

内联输入重定向符号是远小于号(<<).除了这个符号，你必须指定一个文本标记来划分输入数据的开始和结尾。
任何字符串都可以作为文本标记，但在数据的开始和结尾文本标记必须一致

command << marker
data
marker

在命令行上使用内联输入重定向时，shell会用PS2环境变量中定义的次提示符来提示输入数据。

次提示符会持续提示，以获取更多的输入数据，知道你输入了作为文本标记的那个字符串。
wc命令会对内联输入重定向提供的数据进行行，词和字节计数


１１．６　　管道

有时需要讲一个命令的输出作为另一个命令的输入。这可以用重定向来实现，

可以将命令输出重定向到文件中，可以将其直接重定向到另一个命令。这个过程叫做管道连接(piping)
利用名替换所用的反引号(`)一样，管道符号在shell编程之外也很少用到。
该符号偶两个竖线构成，一个在另一个上面。
然而管道符号的印刷体通常看起来更像单个竖线(|)	,在美式键盘上，它通常和反斜线(\)位于同一个键。
管道被放在命令之间，将一个命令的输出重定向到另一个命令中

command1 | command2

不要以为由管道串的两个命令依次执行。linux系统实际上会同时运行这两个命令，系统内部将它们连接起来。在第一个命令产生输出的同时，输出会被立即送给第二个命令。数据传输不会用到任何中间文件或缓冲区

可以在一条命令中使用任意多条管道。可以持续地将命令的输出通过管道传给其他命令来细化操作

也可以搭配使用重定向和管道来将输出保存到文件中

到目前为止，管道最流行的用法之一是将命令产生的大量输出通过管道传送给more命令，这对ls命令来说尤为常见


ls -l命令产生了目录中所有文件的长列表。对包含大量文件的目录来说，这个列表会很长。通过将输出管道连接到more命令，可以强制输出在一屏数据显示后停下来


１１．７　　执行数学运算

在shell脚本中有两种途径进行数学运算

１１．７．１　　expr命令

expr 命令允许在命令行上处理数学表达式，但很繁琐

expr 1 + 5

expr命令能够识别少数的数学和字符串操作符

要解决被shell错误解释的字符，在它们传入expr命令之前，需要使用shell的转义字符(反斜线)将其标出来

11.7.2 使用方括号

在bash中，在将一个数学运算结果赋给某个变量时，可以用美元符号和方括号($[ operation ]) 将数学表达式围起来

用方括号执行shell数学运算比用expr命令方便很多。这种技术也适用于shell脚本

同样，注意在使用方括号来计算公式时，不用担心shell会误解乘号或其他符号。shell知道它不是通配符，因为它在方括号内
在bash shell脚本中进行算术运算会有一个主要的限制。

说明，　z shell(zsh)提供了完整的浮点数算数操作，如果需要在shell脚本中进行浮点数运算，可以考虑看看　z shell

11.7.3  浮点解决方案

有几种解决方案能够克服bash中数学运算的整数限制。最常见的方案是用内建的bash计算器，叫做bc


1. bc的基本用法

bash计算器实际上是一种编程语言，它允许在命令行中输入浮点表达式，然后解释并计算该表达式，最后返回结果。bash计算器能够识别：
(1) 数字(整数和浮点数)
(2)　变量(简单变量和数组)
(3)　注释　(以#或Ｃ语言中的/**/开始的行)
(4)　表达式
(5)　编程语句 (例如if-then语句)
(6)　　函数
可以在shell提示符下通过bc命令访问bash计算器

bash计算器返回了计算结果。随后每个输入到计算器的表达式都会被求值并显示出结果。要退出bash计算器，你必须输入quit

浮点运算是由内建变量scale控制的。必须将这个值设置为你希望在计算结果中保留的小数位数，否则无法得到期望的结果

bc -q
scale=4

scale变量的默认值是０．在scale值被设置前，bash计算器的计算结果不包含小数位。在将其设置为４后，bash计算器显示的结果包含四位小数。-q命令选项可以不显示bash计算器冗长的欢迎信息

除了普通数字，bash计算器还能支持变量

变量一旦被定义，你就可以在整个bash计算器会话中使用该变量了。print语句允许你打印数字和变量

２．　在脚本中使用bc

bash计算器是如何在shell脚本中帮助处理浮点运算的。还记得命令替换吗？可以用命令替换运行bc命令，并将输出赋给一个变量。基本格式如下：

variable=$(echo "options; expression" | bc)

第一部分options允许你设置变量。如果你需要不止一个变量，可以用分号将其分开。expression参数定义了通过bc执行的数学表达式。

现在不但可以用数字作为表达式的值，也可以用shell脚本中定义好的变量

脚本定义了两个变量，它们都可以用在expression部分，然后发送给bc命令。用美元符号表示的是变量的值而不是变量自身

当然，一旦变量被赋值，那个变量也可以用于其他运算

如果需要进行大量运算，在一个命令行中列出多个表达式就很麻烦

有一个方法可以解决这个问题。bc命令能识别输入重定向，允许你将一个文件重定向到bc命令来处理，这个还是得将表达式放到文件中

最好的办法是使用内联输入重定向，它允许你直接在命令行中重定向数据。在shell脚本中，你可以将输出赋给一个变量

variable-$(bc << EOF
options
statements
expressions
EOF)

EOF文本字符串标识了内联重定向数据的起止。记住，仍然需要命令替换符号将bc命令的输出赋给变量。

现在可以将所有bash计算器涉及的部分都放到同一个脚本文件的不同行。


将选项和表达式放在脚本的不同行中可以让处理过程变得更清晰，提高易读性。
EOF字符串标识了重定向给bc命令的数据的起止。当然，必须用命令替换符号标识出用来给变量赋值的命令

在bash计算器中赋值给变量，。在bash计算器中创建的变量只在bash计算器中有效，不能在shell脚本中使用

１１．８　　退出脚本

shell中运行的每个命令都使用退出状态码(exit status)告诉shell它已经运行完毕。退出状态码是一个0~255的整数值，在命令结束运行时由命令传给shell。可以捕获这个值并在脚本中使用。

１１．８．１　　查看退出状态码

linux提供了一个专门的变量$?来保存上一个已经执行命令的退出状态码。对于需要继续你那个检查的命令，必须在其运行完毕后立刻查看或使用$?变量。它的值会变成由shell所执行的最后一条命令

按照惯例，一个成功结束的命令的退出状态码是0.如果一个命令结束时有错误，退出状态码就是一个正数值

无效命令会返回一个退出状态码１２７

linux退出状态码

状态码　　　　　　描述
０          命令成功结束
１　　　　　　一般性未知错误
２　　　　　　不适合的shell命令
１２６　　　　　命令不可执行
１２７　　　　　　没找到命令
１２８　　　　无效的退出参数
１２８＋ｘ　　　　　　　　与linux信号x相关的严重错误
１３０　　　　　　通过Ctrl+c终止的命令
２５５　　　　　　　　正常范围之外的退出状态码


退出状态码１２６表明用户没有执行命令的正确权限
另一个会碰到的常见错误是给某个命令提供了无效参数
这会产生一般性的退出状态码１，表明在命令中发生了未知错误


１１．８．２　　　exit命令

默认情况下，shell脚本会以脚本的最后一个命令的退出状态码退出

你可以改变这种默认行为，返回自己的退出状态码。exit命令允许你在脚本结束时制定一个退出状态码

也可以额在exit命令的参数中使用变量
以返回值当做退出状态码
因为退出状态码最大只能是２５５，如果超过的话，会缩减到0-255的区间。shell通过摸运算得到这个结果。一个值的摸就是被除后的余数。
这个余数就是最后的状态退出吗

后面可以使用if-then语句来检查某个命令返回的错误状态，以便只掉是欧服成功
