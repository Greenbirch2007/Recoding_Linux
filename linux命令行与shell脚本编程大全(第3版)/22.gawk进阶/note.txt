

第２２章　　gawk进阶


本章内容

再探　gawk
在gawk程序中使用变量
使用结构化命令
格式化打印
使用函数



使用gawk编程语言来编写程序，处理可能遇到的各种数据格式化任务


２２．１　使用变量

所有编程语言共有的一个重要特性就是使用变量来存取值。gawk编程语言支持两种不同类型的变量：
１．内建变量
２．自定义变量


22.1.1  内建变量

gawk程序使用内建变量来引用程序数据里的一些特殊功能。

１．字节和记录分隔符变量


gawk中的一种内建变量类型－－－数据字段变量。数据字段变量允许你用美元符号($)和字段在记录中的位置值来引用记录对应的
字段。因此，要引用记录中的第一个数据字段，急用变量$１

数据字段由字段分隔符来划定的。默认情况下，字段分隔符是一个空白字符，也就是空格符或制表符。
内建变量FS是一组内建变量中的一个，这组变量用于控制gawk如何处理输入输出数据数据中的字段和记录。


变量FS和OFS定义了gawk如何处理数据流中的数据字段。默认情况下，gawk将OFS设成一个空格

print $1,$2,$3


gawk 'BEGIN{FS=","} {print $1,$2,$3}' data1

print命令会自动将OFS变量的值放置在输出中的每个字段间。通过设置OFS变量，可以在输出中使用任意字符串来分隔字段


gawk 'BEGIN{FS=","; OFS="@@@@"} { print $1,$2,$3}'  data1

FIELDWIDTHS变量允许你不依靠字段分隔来读取记录。在一些应用程序中，数据并没有使用字段分隔符，
而是被放置在了记录中的特定列。这种情况下，必须设定FIELDWIDTHS变量来匹配数据在记录中的位置。


一旦设置了FIELDWIDTHS变量，gawk就会忽略FS变量，并根据提供的字段宽度来计算字段。。

gawk 'BEGIN{FIELDWIDTHS="3 5 2 6"}{print $1,$2,$3,$4}'  data1b

FIELDWIDTHS变定义了四个字段，gawk依次来解析数据记录。每个记录中的数字串会根据已定义好的字段长度来分格


变量RS和ORS定义了gawk程序如何处理数据流中的字段。默认情况下，gawk将RS和ORS设为换行符。
默认的RS值表明，输入数据流中的每行新文本就是一条新纪录


gawk 'BEGIN{FS="\n"; RS=""} {print $1,$4}' data2



gawk把文件中的每行都当成一个字段，把空白行当做记录分隔符


２．　数据变量

除了字段和记录分隔符变量外，gawk还提供了其他一些内建变量来帮助你了解数据发生了什么变量


ARGE,ARGV变量允许你从shell中获得命令行参数的总数以及它们的值。

gawk 'BEGIN{print ARGC,ARGV[1]}' data1

ARGC变量表明命令行上有两个参数。这包括gawk命令和data1参数(注意，程序脚本并不算参数)。
ARGV数组从索引０开始，代表的是命令。第一个数组值是gawk命令后的第一个命令行采纳数


注意，跟shell变量不同，在脚本中引用gawk变量时，变量名前不加美元符号


ENVIRON变量，它使用关联数组来提取shell环境变量。关联数组用文本作为数组的索引值，而不是数值


数组索引中的文本是shell环境变量名，而数组的值则是shell环境变量的值


gawk '
BEGIN{
print ENVIRON["HOME"]
print ENVIRON["PATH"]
}'


 ENVIRON["HOME"]变量从shell中提取HOME环境变量的值。
ENVIRON["PATH"]变量提取PATH环境变量的值。可以用这种方法来从shell中提取任何环境变量
的值，以供gawk程序使用


要在gawk程序中跟踪数据字段和记录时，变量FNR,NF,NR

gawk 'BEGIN{FS=":";OFS=":"} {print $1,$NF}' /etc/passwd


NF变量含有数据文件中最后一个数据字段的数字值。可以在它前面加个美元符号将其用作字段变量


FNR变量含有当前数据文件已经处理过的记录数，NR变量则含有已经处理过得记录总数。

gawk 'BEGIN{FS=","}{print $1,"FNR="FNR}' data1 data1


gawk程序的命令行定义了两个输入文件(两次指定的是同样的而输入文件)这个脚本会打印第一个数据
字段的值和FNR变量的当前值。
注意，当gawk程序处理第二个数据文件时，FNR值会被设回１

gawk '
BEGIN{FS=","}
{print $1,"FNR="FNR}
END{print "there were",NR,"records processed"}' data1 data1


注意

在shell脚本中使用gawk时，应该将不同的gawk命令放到不同的行，不要
在shell脚本中中将所有的命令都放到一行。

如果在不同的shell脚本中用到同样的gawk脚本，可以将其gawk脚本当道到单独
的文件中，并用-r参数来在shell脚本中引用它

２２．１．２　　自定义变量

跟其他典型的编程语言一样，gawk允许你定义自己的变量在程序代码中使用。gawk自定义变量名
可以是任意数目的字母，数字和下划线，但不能以数字开头。
要记住gawk变量名区分大小写


１．在脚本中给变量赋值

在gawk程序中个变量赋值跟在shell脚本中赋值类似，都用赋值语句


gawk '
BEGIN{
testing="This is a test"
print testing
}'



print语句的输出是testing变量的当前值。跟shell脚本变量一样，gawk变量可以保存数值或文本值


赋值语句还可以包含数学算式来处理数字值

gawk 'BEGIN{x=4;x=x*2 +3;print  x}'


gawk编程语言包含了用来处理数字值的标准算术操作符。其中包括
求余符号(%)和幂运算符号(^或××)

２．　在命令行上给变量赋值

也可以gawk命令行来给程序中的变量赋值。这允许你在正常的代码之外赋值，即时改变变量的值。


示例中使用命令行变量来显示文件中特定数据字段


gawk -f script1 n=3 data1


这个特性可以让你咋不改变脚本代码的情况下就能够改变脚本的行为。


使用命令行参数来定义变量值会有一个问题。在你设置了变量后，这个值在代码的BEGIN部分不可用

可以用-v命令行参数。它允许你在BEGIN代码之前设定变量。在命令行上，-v命令行参数必须放在脚本代码之前

gawk -v n=3 -f script2  data1

现在在BEGIN代码部分中的变量n的值已经是命令行上设定的那个值


２２．２　　处理数组


为了在单个变量中存储多个值，许多编程语言都提供数组。gawk编程语言使用关联数组提供数组功能


关联数组跟数字数组不同之处在于它的索引值可以是各种字符串来引用值。每个索引字符串都必须能唯一
地标识出赋值　给它的数据元素。　　散列表，字典



２２．２．１　　定义数组变量


可以用标准赋值语句来定义数组变量。数组变量赋值的格式如下

var[index] = element



其中 var是变量名，index是关联数组的索引值，element是数据元素值。


在引用数组变量时，必须包含索引值来提取相应的数据元素值


gawk 'BEGIN{
capital["Illinois"] = "Springfield"
print capital["Illinois"]
}'

输出结果，可以像使用gawk程序中的其他变量一样使用数组变量


２２．２．２　　遍历数组变量


关联数组变量的问题在于你可能无法知晓索引值是什么。跟使用连续数字作为索引值的数字数组不同，关联数组的索引可以是任何东西


如果要在gawk中遍历一个关联数组，可以用for语句的一种特殊形式。。


for (var in array)
{
    statements
}


这个for语句会在每次循环时将关联数组array的下一个索引值赋给变量var,然后执行一遍statements.
重要的是记住这个变量中存储的是索引值而不是数组元素值。可以将这个变量用作数组的索引，轻松取出数据元素值


gawk 'BEGIN{
var["a"] = 1
var["g"] = 2
var["m"] = 3
var["u"] = 4
for (test in var)
{
    print "Index:",test," - value:" ,var[test]
}
}'

注意，索引值不会按任何特定顺序返回，但它们都能够指向对应的数据元素值。所以只能保证索引值和数据值是对应的。


２２．２．３　　删除数组变量

从关联数组中删除数组索引要用一个特殊的命令


delete array[index]

删除命令会从数组中删除关联索引值和相关的数据元素值


gawk 'BEGIN{
var["a"] = 1
var["g"] = 2
for (test in var) 
{
    print "Index:",test," - Value:",var[test]
}

delete var["g"]
print "-------"
for (test in var)
    print "Index:",test," - Value:" ,var[test]
}'


一旦从关联数组中删除了索引值，就无法再用它来提取元素值



２２．３　　使用模式

gawk程序支持多种类型的匹配模式来过滤数据记录。BEGIN,END关键字是用来在读取数据流之前或之后执行命令的特殊模式。
类似地，你可以创建其他模式在数据流中出现匹配数据时执行一些命令。


在gawk脚本中用匹配模式来限定程序脚本作用在哪些记录上


２２．３．１　　正则表达式


在使用正则表达式时，正则表达式必须出现在它要控制的程序脚本的做花括号前


gawk 'BEGIN{FS=","} /11/{print $1}' data1


gawk程序会用正则表达式对记录中所有的数据字段进行匹配，包括字段分隔符


gawk 'BEGIN{FS=","} /,d/{print $1}' data1


如果需要用正则表达式匹配某个特定的数据实例，应该使用匹配操作符


２２．３．２　　匹配操作符


匹配操作符(matching operator)允许将正则表达式限定在记录中的特定数据字段。
匹配操作符是波浪线(~).可以指定匹配操作符，数据字段变量以及要匹配的正则表达式


$1 ~ /^data/



$1变量代表记录中的第一个数据字段。这个表达式会过滤出第一个字段以文本data开头的所有记录。


gawk 'BEGIN{FS=","} $2 ~/^data2/{print $0}' data1


gawk程序脚本中经常用它在数据文件中搜索特定的数据元素


gawk -F: '$1 ~/root/{print $1,$NF}'  /etc/passwd



也可以用!符号来排除正则表达式的匹配()

gawk -F: '$1 !~/root/{print $1,$NF}'  /etc/passwd

22.3.3 数学表达式


除了正则表达式，你也可以在匹配模式中用数学表达式。这个功能在匹配数据字段中的数字值很方便


如果你想显示所有属于root用户组（组ID为０）的系统用户，可以用以下脚本


gawk -F: '$4 == 0{print $1}' /etc/passwd


也可以对文本数据使用表达式，但要小心。跟正则表达式不同，表达式必须完全匹配。
数据必须跟模式严格匹配


２２．４　　结构化命令


gawk编程语言支持常见的结构化编程命令。

２２．４．１　　if语句


gawk编程语言支持标准的if-then-else格式的if语句。


if (condition)
    statement1

也可以将它放在一行上　

if (condition) statement1


gawk '{if ($1 > 20) print $1}' data4


如果需要在if语句中执行多条语句，就必须用花括号将它们括起来。


gawk '{
if ($1 > 20)
{
    x = $1 *2
    print  x
}
}' data4

gawk的if语句也支持else子句，允许在if语句条件不成立的情况下执行一条或多条语句。



gawk '{
if ($1 > 20)
{
    x = $1 *2
    print x
}else
{
    x=$1 /2
    print x
}}' data4


可以在单行上使用else子句，但必须在if语句部分之后使用分号

if (condition) statement1;else statement2


gawk '{if ($1 > 20) print $1 *2;else print $1 /2}' data4


22.4.2 while 语句


while 语句为gawk程序提供了一个基本的循环功能。

while (condition)
{   
    statements
}



while循环允许遍历一组数据，并检查迭代的结束条件。如果在计算中必须使用每条记录中的多个数据值。

gawk '{
total = 0
i = 1
while (i<4)
{
    total =+ $i
    i++
}

avg = total / 3
print "Average:",avg
}' data5


while语句会遍历记录汇总的数据字段，将每个值都加到total变量中，并将计数器变量i增值。当计数器值等于４时，
while的条件变成了FALSE，循环结束，然后执行脚本中的下一条语句

这条语句会计算并打印出平均值。这个过程会在数据文件中的每条记录上不断重复

gawk编程语言支持在while循环中使用break语句和continue语句，允许你从循环中挑出


gawk '{
total = 0
i = 1
while (i < 4)
{
    total += $i
    if (i == 2)
        break
    i++
}
avg = total / 2
print "The average of the first two data elements is :", avg
}' data5


break语句用来在i变量的值为２时从while循环中跳出


２２．４．３　　do-while语句


do 
{
    statements
} while (condition)

这种格式保证了语句会在条件被求值之前至少执行一次。当需要在求值条件前执行语句时，这个特性非常方便


gawk '{
total = 0
i = 1
do
{
    total += $i
    i++
} while (total < 166)
print total }' data5


这个脚本会读取每条记录的数据字段并将它们加在一起，知道累加到１６６
如果第一个数据字段大于150，则脚本会保证在条件被求值前至少读取第一个数据字段的内容


２２．４．４　　for语句


for语句是许多编程语言执行循环的常见方法。gawk编程语言支持C风格的for循环

for (variable assignment;condition'iteration process)


gawk '{
total = 0
for ( i=1;i<4;i++)
{
    total += $i
}
avg = total / 3
print "Average:",avg
}' data5

定义了for循环中的迭代计数器，


２２．５　　格式化打印

使用格式化打印命令，printf

printf "format string",var1,var2....


format string是格式化输出的关键。它会用文本元素和格式化指定符来具体指定如何呈现
格式化输出。格式化指定符是一种特殊的代码，会指明显示什么类型的变量以及如何显示。
gawk程序会将每个格式化指定符作为占位符，供命令中的变量使用。

第一个格式化指定符对应列出的第一个变量，第二个对应第二个变量



%[modifier] control-letter

其中control-letter是一个单字符代码，用于指明显示什么类型的数据，而modifier则定义了可选的格式化特性


在使用printf语句，可以完全控制输出样式

２２．６　内建函数

22.6.1 数学函数

比如产生大整数随机数的常见方法是rand()函数和int()函数创建一个算法

２２．６．２　　字符串函数

gawk编程语言提供了依稀可用来处理字符串值的函数

比如split函数是将数据字段放到数组中以供进一步处理的好方法


新数组使用连续数字作为数组索引，从含有第一个数据字段的索引值１开始

２２．６．３　　时间函数

gawk编程语言包含一些函数来帮助处理时间值


时间函数常用来处理日志文件，而日志文件则常含有需要进行比较的日期。通过将日期的文本表示形式转换成epoch时间，就可以
轻松比较时间


gawk 'BEGIN{
date = systime()
day = strftime("%A,%B %d,%Y",date)
print day
}'

22.7 自定义函数


22.7.1  定义函数


要定义自己的函数，必须用function关键字

function name([variable])
{
    statements
}


函数名必须能够唯一标识函数。可以在调用的gawk程序中传给这个函数一个或多个变量。


function printthird()
{
    print $3
}
这个函数会打印记录中的第三个数据字段


函数还能用return语句返回值： return value

值可以是变量，或是最终能计算出值的算式：


function myrand(limit)
{
    return int(limit * rand())
}


你可以将函数的返回值赋给gawk程序中的一个变量：

x =myrand(100)

这个变量包含函数的返回值


２２．７．２　　使用自定义函数

在定义函数时，它必须出现在所有代码块之前(包括BEGIN代码块)


２２．７．３　　创建函数库

gawk提供了一种途径来将多个函数放到一个库文件中，这样你就能在所有的gawk程序中使用了。

２２．８　　实例


如果需要处理数据文件中的数据值。
处理数据文件时，关键是要先把相关的记录放在一起，然后对其相关数据执行必要的计算


for 循环中的第一条语句过滤出数据文件的队名，然后使用uniq命令返回不重复的队名。
for循环再对每个对进行迭代

