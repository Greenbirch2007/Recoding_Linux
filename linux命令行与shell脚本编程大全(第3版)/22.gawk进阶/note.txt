

第２２章　　gawk进阶


本章内容

再探　gawk
在gawk程序中使用变量
使用结构化命令
格式化打印
使用函数



使用gawk编程语言来编写程序，处理可能遇到的各种数据格式化任务


２２．１　使用变量

所有编程语言共有的一个重要特性就是使用变量来存取值。gawk编程语言支持两种不同类型的变量：
１．内建变量
２．自定义变量


22.1.1  内建变量

gawk程序使用内建变量来引用程序数据里的一些特殊功能。

１．字节和记录分隔符变量


gawk中的一种内建变量类型－－－数据字段变量。数据字段变量允许你用美元符号($)和字段在记录中的位置值来引用记录对应的
字段。因此，要引用记录中的第一个数据字段，急用变量$１

数据字段由字段分隔符来划定的。默认情况下，字段分隔符是一个空白字符，也就是空格符或制表符。
内建变量FS是一组内建变量中的一个，这组变量用于控制gawk如何处理输入输出数据数据中的字段和记录。


变量FS和OFS定义了gawk如何处理数据流中的数据字段。默认情况下，gawk将OFS设成一个空格

print $1,$2,$3


gawk 'BEGIN{FS=","} {print $1,$2,$3}' data1

print命令会自动将OFS变量的值放置在输出中的每个字段间。通过设置OFS变量，可以在输出中使用任意字符串来分隔字段


gawk 'BEGIN{FS=","; OFS="@@@@"} { print $1,$2,$3}'  data1

FIELDWIDTHS变量允许你不依靠字段分隔来读取记录。在一些应用程序中，数据并没有使用字段分隔符，
而是被放置在了记录中的特定列。这种情况下，必须设定FIELDWIDTHS变量来匹配数据在记录中的位置。


一旦设置了FIELDWIDTHS变量，gawk就会忽略FS变量，并根据提供的字段宽度来计算字段。。

gawk 'BEGIN{FIELDWIDTHS="3 5 2 6"}{print $1,$2,$3,$4}'  data1b

FIELDWIDTHS变定义了四个字段，gawk依次来解析数据记录。每个记录中的数字串会根据已定义好的字段长度来分格


变量RS和ORS定义了gawk程序如何处理数据流中的字段。默认情况下，gawk将RS和ORS设为换行符。
默认的RS值表明，输入数据流中的每行新文本就是一条新纪录


gawk 'BEGIN{FS="\n"; RS=""} {print $1,$4}' data2



gawk把文件中的每行都当成一个字段，把空白行当做记录分隔符


２．　数据变量

除了字段和记录分隔符变量外，gawk还提供了其他一些内建变量来帮助你了解数据发生了什么变量


ARGE,ARGV变量允许你从shell中获得命令行参数的总数以及它们的值。

gawk 'BEGIN{print ARGC,ARGV[1]}' data1

ARGC变量表明命令行上有两个参数。这包括gawk命令和data1参数(注意，程序脚本并不算参数)。
ARGV数组从索引０开始，代表的是命令。第一个数组值是gawk命令后的第一个命令行采纳数


注意，跟shell变量不同，在脚本中引用gawk变量时，变量名前不加美元符号


ENVIRON变量，它使用关联数组来提取shell环境变量。关联数组用文本作为数组的索引值，而不是数值


数组索引中的文本是shell环境变量名，而数组的值则是shell环境变量的值


gawk '
BEGIN{
print ENVIRON["HOME"]
print ENVIRON["PATH"]
}'


 ENVIRON["HOME"]变量从shell中提取HOME环境变量的值。
ENVIRON["PATH"]变量提取PATH环境变量的值。可以用这种方法来从shell中提取任何环境变量
的值，以供gawk程序使用


要在gawk程序中跟踪数据字段和记录时，变量FNR,NF,NR

gawk 'BEGIN{FS=":";OFS=":"} {print $1,$NF}' /etc/passwd


NF变量含有数据文件中最后一个数据字段的数字值。可以在它前面加个美元符号将其用作字段变量


FNR变量含有当前数据文件已经处理过的记录数，NR变量则含有已经处理过得记录总数。

gawk 'BEGIN{FS=","}{print $1,"FNR="FNR}' data1 data1


gawk程序的命令行定义了两个输入文件(两次指定的是同样的而输入文件)这个脚本会打印第一个数据
字段的值和FNR变量的当前值。
注意，当gawk程序处理第二个数据文件时，FNR值会被设回１

gawk '
BEGIN{FS=","}
{print $1,"FNR="FNR}
END{print "there were",NR,"records processed"}' data1 data1


注意

在shell脚本中使用gawk时，应该将不同的gawk命令放到不同的行，不要
在shell脚本中中将所有的命令都放到一行。

如果在不同的shell脚本中用到同样的gawk脚本，可以将其gawk脚本当道到单独
的文件中，并用-r参数来在shell脚本中引用它

２２．１．２　　自定义变量

跟其他典型的编程语言一样，gawk允许你定义自己的变量在程序代码中使用。gawk自定义变量名
可以是任意数目的字母，数字和下划线，但不能以数字开头。
要记住gawk变量名区分大小写


１．在脚本中给变量赋值

在gawk程序中个变量赋值跟在shell脚本中赋值类似，都用赋值语句


gawk '
BEGIN{
testing="This is a test"
print testing
}'



print语句的输出是testing变量的当前值。跟shell脚本变量一样，gawk变量可以保存数值或文本值


赋值语句还可以包含数学算式来处理数字值

gawk 'BEGIN{x=4;x=x*2 +3;print  x}'


gawk编程语言包含了用来处理数字值的标准算术操作符。其中包括
求余符号(%)和幂运算符号(^或××)

２．　在命令行上给变量赋值

也可以gawk命令行来给程序中的变量赋值。这允许你在正常的代码之外赋值，即时改变变量的值。


示例中使用命令行变量来显示文件中特定数据字段


gawk -f script1 n=3 data1


这个特性可以让你咋不改变脚本代码的情况下就能够改变脚本的行为。


使用命令行参数来定义变量值会有一个问题。在你设置了变量后，这个值在代码的BEGIN部分不可用

可以用-v命令行参数。它允许你在BEGIN代码之前设定变量。在命令行上，-v命令行参数必须放在脚本代码之前

gawk -v n=3 -f script2  data1

现在在BEGIN代码部分中的变量n的值已经是命令行上设定的那个值


２２．２　　处理数组


为了在单个变量中存储多个值，许多编程语言都提供数组。gawk编程语言使用关联数组提供数组功能


关联数组跟数字数组不同之处在于它的索引值可以是各种字符串来引用值。每个索引字符串都必须能唯一
地标识出赋值　给它的数据元素。　　散列表，字典



２２．２．１　　定义数组变量