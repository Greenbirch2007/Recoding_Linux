第17章 创建函数

本章内容


基本的脚本函数
返回值
在函数中使用变量
数组变量和函数
函数递归
创建库
在命令行中使用函数


可以将shell脚本代码放进函数中封装起来，增强复用


17.1  基本的脚本函数

函数是一个脚本代码块，可以为其命名并在代码中任何位置重用。


17.1.1  创建函数

两种创建函数的方法
1. 采用关键字function,后跟分配给该代码块的函数名

function name { commands }

name属性定义了赋予函数的唯一名称。脚本汇总定义的每个函数都必须有一个唯一的名称
commands是构成函数的一条或多条bash shell命令。在调用该函数时，bash shell会按命令在函数中出现的顺序依次执行，


2. name() { commands }


函数名后的空括号表明正在定义的是一个函数。

17.1.2 使用函数

要在脚本中使用函数，只需要像其他shell命令一样，在行中指定函数名即可

每次引用函数名func1时，bash shell会找到func1函数的定义并执行你在那里定义的命令



１７．２　　返回值

bash shell会把函数当做一个小型脚本，运行结束时会返回一个退出状态码。
有３种不同的方法来为函数生成退出状态码

１７．２．１　　默认退出状态码

默认情况下，函数的退出状态码是函数中的最后一条命令返回的退出状态码。在函数执行结束后，可以用标准变量$?来确定函数的退出状态码

函数的退出状态码是１，这是因为函数中的最后一条命令没有成功运行。但你无法知道函数中其他命令中是否成功运行。


１７．２．２　　使用return mingl　

return命令允许指定一个整数值来定义函数的退出状态码，从而提供一种简单的途径来编程设定函数退出状态码
１７．２．３　　使用函数输出

可以对函数的输出采用同样的处理办法。可以用这种技术来获得任何类型的函数输出，并将其保存到变量中：

17.3 在函数中使用变量、

在函数中使用变量时，你需要注意它们的定义方式以及会处理方式。这是shell脚本中常见错误的根源

１７．３．１　向函数传递参数

bash shell会将函数当做小型脚本来对待。这意味着你可以像普通脚本那样向函数传递参数

函数可以使用标准的参数环境变量来命令。例如，函数名会在$0变量中定义，函数命令行上的任何参数都会通过$1,$2等定义。
也可以用特殊变量$#来判断传给函数的参数数目

在脚本中指定函数时，必须将参数和函数放在同一行。然后函数可以用参数环境变量来获得参数值

１７．３．２　在函数中处理变量

变量的作用域。作用域是变量可见的区域。函数中定义的变量与普通变量的作用域不同。对脚本的其他部分可言，它们是隐藏的
函数使用两种类型的变量：
全局变量
局部变量

１．全局变量
全局变量是在shell脚本中任何地方都有效的变量。如果你在脚本的主体部分定义了一个全局变量，那么可以在函数内读取它的值。
如果你在函数内定义了一个全局变量，可以在脚本的主体部分读取它的值

默认情况下，你在脚本定义的任何变量都是全局变量。在函数外定义的变量可在函数内正常访问。

$value变量在函数外定义并被赋值。当db1函数被调用时，该变量及其值在函数中都依然有效。如果变量在函数内容被赋予新值，那么在脚本中引用该变量时，新值依然有效


２．　局部变量

无需在函数中使用全局变量，函数内部使用的任何变量都可以被声明为局部变量。要实现这一点，只要在变量声明的前面加上local关键字就可以了

local temp
也可以在变量赋值语句中使用local关键字

local temp=$[ $value + 5 ]
local关键字保证了变量只局限在该函数中。如果脚本中在该函数之外有同样名字的变量，那么shell将会保持这两个变量的值是分离的。现在你就能轻松地将函数变量和脚本变量隔离开了，只共享需要共享的变量


１７．４　　数组变量和函数

１７．４．１　向函数传递数组参数

向脚本函数传递数组变量的方法有些不好理解，将数组变量当做单个参数传递的话，它不会起作用


如果你试图将该数组变量作为函数参数，函数只会取数组变量的第一个值。

要解决这个问题，你必须将该数组变量的值分解成单个值，然后将这些值作为函数参数使用。在函数内部，可以将所有的参数重新组合成一个新的变量


１７．４．２　从函数返回数组

从函数里向shell脚本传回数组变量也用类似的方法。函数用echo语句来按正确顺序输出单个数组值，然后脚本再将它们重新放进一个
新的数组变量中

１７．５　　函数递归

局部函数变量的一个特性是自称体系。除了从脚本命令行出获得的变量，自成体系的函数不需要使用任何外部资源。

１７．６

如何省略一些输入工作。bash shell允许创建函数库文件，然后在多个脚本中引用该文件。
这个过程的第一步是创建一个包含脚本中所需函数的公用库文件。一个myfunc的库文件，它定义了３个简单的函数。


使用函数库的关键在于source命令。source命令会在当前shell上下文中执行命令，而不是创建一个新的shell。可以用source命令来在shell脚本中运行库文件脚本。这样脚本就可以使用库中的函数了

source命令有个快捷的别名，称作点操作符(dot operator).要在shell脚本中运行myfuncs库文件，只需要添加
下面这行：　　../myfuncs 在脚本中加入

这个例子假定myfuncs库文件和shell脚本位于同一目录。如果不是，你需要使用相应路径访问该文件。这里有个用myfuncs库文件创建脚本的例子

１７．７　　在命令行上使用函数

可以用脚本函数来执行一个十分复杂的操作。有时也很有必要在命令行界面的提示符下直接使用这些函数


和利用shell脚本中中将脚本函数当做命令使用一样，在命令行界面中你也可以这样做。

１７．７．１　在命令行创建函数
因为shell会解释用户输入的命令，所以可以在命令行上直接定义一个函数，
有两个方法：
一种是采用单行方式定义函数

function divem { echo $[ $1 / $2 ];}


当在命令行上定义函数时，你必须记得在每个命令后面加个分号，这样shell就能知道在哪里是命令的起始了


另一种方法是采用多行方式来定义函数。在定义时，bash shell会使用次提示符来提示输入更多命令。
用这种方法，不用在每条命令的末尾放一个分号，只要按下回车键即可

function multem {
echo $[ $1 * $2 ]
}

在函数的尾部使用花括号，shell就会知道你已经完成了函数的定义。


警告，在命令行上创建函数时要特别小心。如果你给函数起了个跟内建命令或另一个命令相同的名字，函数将会覆盖原来的命令


１７．７．２　在.bashrc文件中定义函数

每次bash shell在启动时都会在主目录下查找这个文件，不管是交互式shell还是从现有shell中启动的新的shell

1. 直接定义函数

可以直接在主目录下的.bashrc文件中定义函数。需要linux发行版已经在.bashrc文件中定义了一些东西。注意不要误删。
把写的函数放在文件末尾即可


if [ -r /etc/profile ];then
    ./etc/profile
fi

function addem{
    echo $[ $1 + $2 ]
}

17.8 实例

函数的应用绝不仅限于创建自己的函数自娱自乐。
开源共享，下载大量函数，供自己使用

shtool库踢欧冠呢了一些简单的shell脚本函数，可以用来完成日常的shell功能，例如处理临时文件和目录或格式化输出显示

１７．８．１　下载即安装


见官网

１７．８．２　　构建库

shtool文件必须对特定的linux环境进行配置。配置工作必须使用标准的configure和make

./configure
make

configure命令会检查构建shtool库文件所必需的软件。一旦发现了所需的工具，它会使用工具路径修改配置文件

17.8.3  shtool库函数

shtool库提供了大量方便的，可用于shell脚本的函数



shtool　[options] [ function [options] [args]]

17.8.4  使用库

可以在命令行或自己的shell脚本中直接使用shtool函数