第16章 控制脚本

本章内容

处理信号
以后台模式运行脚本
禁止挂起
作业控制
修改脚本优先级
脚本执行自动化


目前，运行脚本的唯一方式就是以实时模式在命令行界面上直接运行。
还有其他控制脚本方法。这些控制方法包括向脚本发送信号，修改脚本的优先级以及在脚本运行时切换到运行模式

16.1  处理信号

linux利用信号与运行在系统中的进程进行通信。可以通过对脚本进行编程，使其在收到特定信号时执行某些命令，从而控制shell脚本的操作

16.1.1  重温linux信号

linux信号和应用程序可以生成超过30个信号


linux常用信号

信号            值           描述
1            SIGHUP       挂起进程
2           SIGINT            终止进程
3            SIGUIT           停止进程
9            SIGKILL          无条件终止进程
15            SIGERM            尽可能终止进程
17            SIGSTOP           无条件停止进程，但不是终止进程
18           SIGSTP           停止或暂停进程，但不终止进程
19           SIGCONT           继续运行停止的进程


默认情况下，bash shell会忽略收到的任何SIGUIT(3)和SIGERM(5)(所以，交互式shell下才不会被意外终止)
但是，bash shell会处理收到的SIGHUP(1)和SIGINT(2)信号

如果bash shell收到SIGHUP信号，比如当你要离开一个交互式shell，它就会退出。但在退出之前，它会将SIGHUP信号传给所有由该shell所启动的进程(包括正在运行的shell脚本)

通过SIGINT信号，可以中断shell.linux内核会停止为shell分配CPU处理时间。这种情况发生时，shell会将SIGINT信号传给所有由它所启动的进程，以此告知出现的状况

shell会将这些信号传给shell脚本程序来处理。而shell脚本的默认行为是忽略这些信号。它们可能会不利于脚本的运行。要避免这种情况，你可以脚本中加入识别信号的代码，并执行命令来处理信号


16.1.2  生成信号

bash shell允许用键盘上的组合键申城两个基本的linux信号。这个特性在需要停止或暂停失控程序时非常方便

1. 终端进程


ctrl+c组合键会生活才呢过SIGINT,信号，并将其发送给当前在shell中运行的所有进程。

2. 暂停进程

ctrl+z

停止(stopping)进程和终止进程(terminating)进程不同：停止进程会让程序继续保留在内存中，并能从上次停止的位置继续运行


方括号中的数字是shell分配的作业号(job number)。shell将shell中运行的每个进程称为作业，并为每个作业分配唯一的作业号。
可以用ps命令来查看已经停止的作用

16.1.3  捕获信号

trap命令允许你来指定shell脚本要查看并从shell中拦截的linux信号。如果脚本收到了trap命令列出的信号，该信号不再由shell处理，而是交由本地处理


trap commands signals


在trap命令行上，你只要列出想要shell执行的命令，以及一组用空格分开的待捕获的信号。可以用数值或linux信号来指定信号

每次使用Ctrl+C组合键，脚本都会执行trap命令中指定的echo语句，而不是处理该信号并允许shell停止该脚本


16.1.4 捕获脚本提出

要捕获shell脚本的退出，只要在trap命令后加上EXIT信号就行

16.1.5 修改或移除捕获

要想在脚本中的不同位置进行不同的捕获处理，只需重新使用带有新选项的trap命令


要想在脚本中的不同位置进行不同的捕捉处理，只需要重新使用带有新选项的trap命令

修改了信号捕捉之后，脚本处理信号的方式就会发生变化。但是如果一个信号是在捕捉被修改前接收到的，那么脚本仍然会根据最初的trap命令进行处理

也可以删除已经设置好的捕获。只需要在trap命令与希望恢复默认行为的信号列表之间加上两个波折后

技巧

也可以在trap命令后使用单破折号来恢复信号的默认行为。单破折号和双破折号都可以正常发挥作用

移除信号捕捉后，脚本按照默认行为来处理SIGINT信号，也就是终止脚本运行。但如果信号是在捕获被移除前接收收到的，那么脚本
就会按照原先trap命令中的设置进行处理



16.2  以后台模式运行脚本




在后台模式中，进程运行时不会和终端会话上的SIDIN,STDOUT,STDERR关联

也可以在shell脚本汇总试试这个特性，运行它们在后台运行而不用占用终端会话

16.2.1  后台运行脚本

以后台模式运行shell脚本非常简单。只要在命令后价格&符号集合

./t4  &

当&符号放到命令后时，它会将命令和bash shell分离开，将命令作为系统中的一个独立的后台进程运行

方括号中的数字是shell分配给后台进程的作业号。下一个数是linux系统分配给进程的进程ID(PID)

linux系统上运行的每个进程都必须有一个唯一的PID

一旦系统显示了这些内容，新的内容行界面提示符就出现了。

注意，当后台进程运行时，它仍然会使用终端显示器来显示STDOUT,STDERR消息

16.2.2  运行多个后台作业

可以在命令提示符下同时启动后台作业

每次启动新作业时，linux系统都会为其分配一个新的作业号和PID.通过ps命令，可以看到所有脚本处于运行状态

16.3 在非控制台下运行脚本

nohup命令运行了另一个命令来阻断所有发送给该进程的SIGHUP信号。这会在退出终端会话时阻止进程退出

nohup ./t1 &

和普通后台进程一样，shell会给命令分配一个作业号，linux系统会为其分配一个PID号。区别在于，当你使用nohup命令时，
如果关闭该会话，脚本会忽略终端会话发过来的SIGHUP信号

由于nohup命令会解除终端与进程的关联，进程也不再同STDOUT和STDERR联系在一起。为了保存该命令产生的输出，nohup命令会自动将STDOUT和STDERR的消息重定向到一个名为nohup.out的文件中


nohup,out文件包含了通常会发送到终端显示器上的所有输出。在进程完成运行后，你可以查看nohup.out文件中的输出结果

16.4  作业控制

在作业停止后，linux系统会让你选择终止还是重启。你可以用kill命令终止该进程。要重启停止的继承需要向其发送一个SIGCONT信号

启动，停止，终止以及恢复作业的这些功能统称为作业控制。通过作业控制，就能完全控制shell环境中所有进程的运行方式。

16.4.1 查看作业

作业控制中的关键命令是jobsIngles。jobs命令允许查看shell当前正在处理的作业


脚本用$$变量来显示linux系统分配给该脚本的PID,然后进入循环，每次迭代休眠10秒

jobs命令可以查看分配给shell的作业。jobs命令会显示这两个已经停止，运行中的作业，以及它们的作业号和作业中使用的命令

要查看作业的PID,可以在jobs命令中加入-l选项

16.4.2  重启停止的作业

要以后台模式重启一个作业，可以用bg命令加上作业号

如果有多个作业，得在bg命令后加上作业号

命令bg 2 用于将第二个作业置于后台模式。注意，当使用jobs命令时，它列出了作业以及状态，即便是默认作业当前并未处于后台模式
要以前台模式重启作业，可用带有作业号的fg命令

16.5  调整谦和度

在多任务操作系统中，内核负责将CPU时间分配给系统上运行的每个进程。调度优先级(scheduling priority)是内核分配给进程的CPU时间(相对于其他进程)
在Linux系统中，由于shell启动的所有进程的调度优先级默认都是有用的
调度优先级是个整数值，从-20（最高优先级）到+19(最低优先级)。
默认情况下，bash shell以优先级0来启动所有的进程

16.5.1  nice命令

nice命令允许你设置命令启动的调动优先级。要让命令以更低的优先级运行，只要用nice的-n命令行来指定新的优先级级别
16.5.2 renice
16.6  定时运行作业

linux系统提供了多个在预选时间运行脚本的方法：at 命令和cron表。每个方法都是用不同的技术来安排脚本的运行时间和效率

16.6.1  用at命令来计划执行作业

1. at命令的格式

at [ -f filname ] time 


2. 获取作业的输出

at命令会显示分配给作业的作业号以及为作业安排的运行时间。-f选项指明使用哪个脚本文件，now指示at命令立刻执行该脚本

3. 列出等待的作业

atq
4. 删除作业

atrm

16.6.2  安排需要定期执行的脚本

linux系统使用cron程序来安排要定期执行的作业

1.cron时间表

min hour dayofmonth month dayofweek command

2. 构建cron时间表

每个系统用户(包括root用户)都可以用自己的cron时间表来运行安排好的任务。
linux提供了crontab命令来处理cron时间表。要列出已有的cron时间表，可以用-l选项

默认情况下，用户的cron时间表文件并不存在。要为cron时间表添加条目，可以用-e选项。
在添加条目时，crontab命令会启用一个文本编辑器，使用已有的cron时间表作为文件内容

3. 浏览cron目录

用预设置的cron脚本目录会更方面：有4个

hourly,daily,monthly,weekly


如果脚本需要每天运行一次，只要将脚本复制到daily目录，cron机会每天执行它

4.anacron程序

如果anacron知道某个作业错过了执行时间，它会尽快运行该作业。这意味着如果Linux系统关机了几天，当它再次开机时，
原定在关机期间运行的作业会自动运行

这个功能常用于常规日志维护的脚本。如果系统在脚本应该运行时间的时间刚好关机，日志文件就不会被整理，可能会变很大。
通过anacron,至少可以保证系统每次启动时整理日志文件

anacron程序只会处理位于cron目录的程序，比如/etc/cron.monthly.它用时间戳来决定作业是否在正确的计划间隔内运行了。
每个cron目录都有个时间戳文件，该文件位于/var/spool/anacron

anacron程序使用自己的时间表(通常位于/etc/anacrontab)来检查作业目录

16.6.3  使用新shell启动脚本

每次启动一个新shell时，bash shell都会运行.bashrc文件.
.bashrc文件通常也是通过某个bash启动文件来运行的。因为.bashrc文件会运行两次：一次是当你登录如bash shell时，
另一次是当你启动一个bash shell时。如果你需要一个脚本在两个时刻都得以运行，可以把这个家伯恩放入这个文件。、


