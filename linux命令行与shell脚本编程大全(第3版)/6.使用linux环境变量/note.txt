

第6章  使用linux环境变量


本章内容


什么是环境变量
创建自己的环境变量
删除环境变量
默认shell环境变量
设置PATH环境变量
定位环境文件
数组变量


linux环境变量会提升linux shell体验。很多程序和脚本都通过环境变量来获取系统信息，存储临时数据和配置信息。
linux环境变量：它们存储在哪里，怎样使用，以及怎样创建自己的环境变量。最后以数组变量的用法作为结束


6.1  什么是环境变量


bash shell用一个叫做环境变量(enviroment variable)的特性来存储有关shell会话和工作环境的信息(这也是它们
被乘坐环境变量的原因)。这项特性允许你在内存中存储数据，以便程序或shell中运行的脚本能够轻松访问它们。
这也是存储持久数据的一种简便方法

在bash shell中，环境变量分为两类：
1.全局变量
2. 局部变量

6.1.1 全局环境变量

全局环境变量对于shell会话和所有生成的子shell都是可见的。局部变量则只对创建它们的shell可见。这让全局变量对那些
所创建的子shell需要获取父shell信息的程序来说很有用

linux系统在你开始bash会话时就设置了一些全局环境变量。
系统环境变量基本上是使用全大写字母，以区别于普通用户的环境变量
要查看全局变量，可以使用env或printenv命令



系统为bash shell设置的全局环境变量数目众多，在展示的时候要进行删减。其中有很多
是在登录过程中设置的，另外，你的登录方式也会影响到所设置的环境变量

要显示个别环境变量的值，可以使用printenv命令，但不要用env命令

也可以使用echo显示变量的值。在这种情况下引用某个环境变量的时候，必须在变量前面加上一个美元符($)

echo $HOME

在echo命令中，在变量名前加上$可不仅仅是要显示变量当前的值。它能够让变量作为命令行参数

全局环境变量可用于进程的所有子shell

全局环境变量，用bash命令生成一个子shell后，显示了HOME环境变量的当前值，这个值和父shell一样

6.1.2  局部环境变量

局部环境变量只能在定义它们的进程中可见。但是，linux系统也默认定义了标准的局部环境变量。
你可以定义自己的局部变量，这些变量被称为用户定义局部变量

查看局部环境变量的列表有些复杂。在linux系统并没有一个只显示局部环境变量的命令。

set命令会显示为某个特定进程设置的所有环境变量，包括局部变量，全局变量以及用户自己定义变量

所有通过printenv命令能看到的全局环境变量都出现在了set命令的输出中。
但在set命令的输出中还有其他一些环境变量，即局部环境变量和用户定义变量


说明   env,printenv,set之间的区别


1.set命令会显示出全局变量，局部变量以及用户定义变量。它还会按照字母顺序对结果进行排序

2.env和printenv命令同set的区别在于前两个命令不会对变量排序，也不会输出局部变量和用户定义变量。
在这种情况下，env和printenv的输出是重复的。


6.2  设置用户定义变量

可以在bash shell中直接设置自己的变量。
6.2.1 设置局部用户定义变量

一旦启动了bash shell (或执行一个shell脚本)，就能创建在这个shell进程内可见的局部变量了。可以通过等号给环境变量赋值，
值可以是数值或字符串


echo $my_variable


my_variable=Hello

echo $my_variable

现在每次引用my_variable环境变量的值，只要通过$my_variable引用即可。
如果要给变量赋一个含有空格的字符串值，必须用单引号来界定字符的首和尾


my_variable="laserawrawer"

没有单引号的化，bash shell会以为下一个词是要执行的命令。
注意，你定义的局部环境变量用的是小写字母，而到目前为止所用到的环境变量都是大写


注意，
所有的环境变量名均使用大写字母，这是bash shell的标准惯例。如果是你自己创建的局部变量或是shell脚本，请使用
小写字母。变量名区分大小写。在涉及用户定义的局部变量时坚持使用小写字母，这能够避免重新定义系统环境变量可能带来的麻烦

注意，变量名，等号和值之间没有空格

设置了局部环境变量后，就能在shell进程的任何地方使用它了。但是，如果生成了另外一个shell，它在子shell中就不可用


如果你在子进程中设置了一个局部变量，那么一旦你退出了子进程，那个局部环境变量就不可用

当我们回到父shell时，子shell中设置的局部变量就不存在了，可以通过将局部的用户定义变量变成全局变量来改变这种情况

6.2.2  设置全局环境变量

在设定全局环境变量的进程所创建的子进程中，该变量都是可见的。创建全局环境变量的方法是先创建一个局部环境变量，然后再把
它导出到全局环境中

这个过程通过export命令来完成，变量名前面不需要加$

my_variable="I am Global now"

export my_variable

echo $my_variable

bash

echo $my_variable

exit

echo $my_variable

在定义并导出局部环境变量my_variable后，bash命令启动了一个子shell
在这个子shell中能够正确的显示出变量my_variable的值。该变量能够保留住它的值是因为export命令使其变成了全局环境变量


修改子shell中全局全景变量并不会影响到父shell中该变量的值

在定义并导出变量my_variable后，bash命令启动了一个子shell。在这个 子shell中能够正确显示出全局环境变量my_variable
的值。子shell随后改变了这个变量的值。但是这种改变值对子shell有效，并不会反映到父shell中

子shell甚至无法使用export命令改变父shell中全局环境变量的值

尽管子shell重新定义并导出了变量my_variable,但父shell中的my_variable变量依然保留这原先的值

6.3 删除环境变量

既然可以创建新的环境变量，自然也能删除已经存在的环境变量。可以用unset命令完成这个操作。在unset命令中引用给环境变量
时，记住不要使用$

注意，在涉及环境变量名时，什么时候使用$，什么时候不用$

如果要用到变量,使用$;如果要操作变量，不使用$.这条规则的一个例外就是使用printenv显示某个变量的值

在处理全局环境变量时，如果是在子进程中删除了一个全局环境变量，这只对子进程有效。该全局环境变量在父进程依然可用


和修改变量一样，在子shell中删除全局变量后，无法将效果反应到父shell中


6.4 默认的shell环境变量


默认情况下，bash shell会用到一些特定的环境变量来定义系统环境。这些变量在你的linux系统上都已经设置好了。

不是所有的默认环境变量都会在运行set命令时列出。尽管这些都是默认环境变量，单并不是每一个都必须有一个值


6.5 设置PATH环境变量


当你在shell命令界面中输入一个外部命令时，shell必须搜索系统来找到对应的程序。PATH环境变量定义了用于进行命令和程序
查找的目录。
echo $PATH

输出中显示了8个可供shell用来查找命令和程序，PATH中的目录使用冒号分隔

如果命令或程序的位置没有包括在PATH变量中，那么如果不使用绝对路径的话，shell是无法找到的
如果shell找不到指定的命令或程序，它会产生一个错误信息

应用程序放置可执行文件的目录常常不在PATH环境变量所包含的目录中。解决的办法是保证PATH环境变量
包含了所有存放应用程序的目录。

可以把新的搜索目录添加到现有的PATH环境变量中，无需从头定义。PATH中各个目录之间是用冒号分隔的。
你只需引用原来的PATH值，然后再给这个字符串添加新目录就行了

假定在Scripts文件夹中有一个myrpog.sh，里面的内容是the factorial of 5 is 120.

echo $PATH

PATH=$PATH:/home/lk/Scripts

echo $PATH

myprog

将目录加到PATH环境变量之后，你现在就可以在虚拟目录结构中的任何位置执行程序

添加快捷方式
vim /etc/profile

export PATH="$PATH:/home/lk/pycharm/bin;/home/lk/PYENV/bin"
export PATH="$PATH:";

source /etc/profile


2.pycharm.sh



将目录加到PATH环境变量之后，你现在就可以在虚拟目录结构中的任何位置执行程序

如果希望子shell也能找到你的程序的位置，一定要记得把修改后的PATH环境变量导出

程序员通常的办法是将单点符也加入PATH环境。该单点符代表当前目录

对PATH变量的修改只能持续到退出或重启系统。这种效果并不不能一直持续。
在下一节中，会用到如何永久保持环境变量的修改效果

6.6 定位系统环境变量

环境变量在linux系统中的用途很多。你现在已经知道如何修改系统环境变量，也知道了如何创建自己的
环境变量。接下来是让环境变量的作用持久化

在你登入linux系统启动一个bash shell时，默认情况下bash会在几个文件中查找命令。
这些文件叫做启动文件或环境文件。bash检查的启动文件取决于你启动bash shell的方式。
启动bash shell有3种方式：
1.登录时作为默认登录shell
2.作为非登录shell的交互式shell
3.作为运行脚本的非交互shell

下面几节介绍了bash shell在不同的方式下启动文件

6.6.1 登录shell

当你登录linux系统时，bash shell会作为登录shell启动。登录shell会从5个不同的启动文件里读取命令：

（1） /etc/profile
（2） $HOME/.bash_profile
（3） $HOME/.bashrc
（4） $HOME/.bash_login
（5） $HOME/.profile



/etc/profile文件是系统上默认的bash shell的主启动文件。系统上的每个用户登录时都会执行这个启动文件


另外4个启动文件是针对用户的，可根据个人需求定制。我们来仔细看一下各个文件

1./etc/profile文件

/etc/profile文件是bash shell默认的主启动文件。只要你登录了linux系统，bash就会执行/etc/profile启动文件中的命令。
不同的linux发行版在这个文件里放了不同的命令

不同的/etc/profile文件都用到了同一个特性：for语句。它用来迭代/etc/profile.d目录下的所有文件

这为linux系统提供了一个放置特定的应用程序启动文件的地方，当用户登录时，shell会执行这些文件。


ls -l  /etc/profile.d

有些文件与系统中的特定应用有关。大部分应用都会创建两个启动文件：一个供bash shell使用(使用.sh扩展名)，一个供c shell使用(使用.csh扩展名)

lang.csh和lang.sh文件会尝试去判定系统上所采用的默认语言字符集，然后设置对应的LANG的环境变量

2. $HOME目录下的启动文件

剩下的启动文件都起着同一个作用：提供一个用户专属的启动文件来定义使用该用户所用到的环境变量
大多数linux发行版之用这四个启动文件的一个或两个

$HOME/.bash_profile
$HOME/.bashrc
$HOME/.bash_login
$HOME/.profile

注意，这四个文件都以点号开头，这说明它们是隐藏文件
它们位于用户的HOME目录下，所以每个用户都可以编辑这些文件并添加自己的环境变量，这些环境变量
会在每次启动bash shell会话时生效

shell会按照顺序，运行第一个被找到的文件，余下的则被忽略


注意，$HOME表示的而是某个用户的主目录。它和波浪号(~)的作用是一样的

.bash_profile启动文件会先去检查HOME目录中是不是还有一个叫.bashrc的启动文件。如果有的话，
会先执行启动文件里面的命令


6.6.2  交互式shell进程


如果你的bash shell不是登录系统时启动的(比如是在命令行提示符下敲入bash时启动)，那么你启动的shell
叫做交互式shell。交互式shell不会像登录shell一样运行，但它依然提供了命令行提示符来输入命令

如果bash是作为交互式shell启动的，它就不会访问/etc/profile文件，只会检查用户HOME目录中的.bashrc文件

.bashrc文件有两个作用：
1.查看/etc目录下通用的bashrc文件，
2.为用户提供一个定制自己的命令别名和私有脚本函数的地方

6.6.3  非交互式shell

最后一种shell是非交互式shell.系统执行shell脚本时用的就是这种shell.
不同的地方在于它没有命令行提示符。
但是当你在系统上运行脚本时，也许希望能够运行一些特定启动的命令


注意，脚本能以不同的方式执行。只有其中的某一些方式能够启动子shell.

为了处理这种情况，bash shell提供了BASH_ENV环境变量。当shell启动一个非交互式shell进程时，
它会检查这个环境变量来查看要执行的启动文件。如果有指定的文件，shell会执行该文件里的命令，
这通常包括shell脚本变量设置

如果变量未设置，printenv命令只会返回CLI提示符

一些shell脚本是通过启动一个子shell来执行的。子shell可以继承父shell导出过的变量

比如，如果父shell是登录shell,在/etc/profile,/etc/profile.d/*.sh 和$HOME/.bashrc文件中
设置并导出了变量，用于执行脚本的子shell就能够继承这些变量

要记住，由父shell设置但并未导出的变量都是局部变量。子shell无法继承局部变量

对于那些不启动子shell的脚本，变量已经存在于当前shell中了，所以就算没有设置BASH_ENV，也可以使用当前shell的局部变量和全局变量

6.6.4  环境变量持久化

最好是在/etc/profile.d目录中创建一个以.sh结尾的文件。把所有新的或修改过的全局环境变量设置放在
这文件中
在大多数发行版中，存储个人用户永久性bash shell变量的地方是$HOME/.bashrc文件。这一点使用与所有类型的shell进程。如果设置了BASH_ENV变量，那么记住，除非它指向的是$HOME/.bashrc,否则你应该将非交互式shell的用户变量放在别的地方

说明，图形化界面组成部分(比如GUI客户端)的环境变量可能需要在另外一些配置文件中设置，这和设置bash shell环境变量的地方不一样

alias 改名命令的设置是不能持久的，可以把自己的alias设置放在$HOME/.bashrc启动文件中，使其效果永久化



6.7  数组变量

环境变量的一个特性，它们可以作为数组使用。数组是能够存储多个值的变量。这些值可以单独引用，也可以作为整个数组来引用

要给某个环境变量设置多个值，也可以把值放在括号里，值与值之间用空格分隔


mytest=(one two three four five)

echo $mytest

只有数组的第一个值显示出来了。要引用一个单独的数组元素，就必须用代表它在数组中位置的数值索引值。
索引值要用方括号括起来

echo ${mytest[2]}

环境变量数组的索引值都是从零开始的。

要显示整个数组变量，可用星号作为通配符放在索引值的位置
echo ${mytest[*]}

也可以改变某个索引值位置的值
mytest[2]=seven

删除数组中的某个值 unset mytest[2]
或者删除整个数组 unset mytest
