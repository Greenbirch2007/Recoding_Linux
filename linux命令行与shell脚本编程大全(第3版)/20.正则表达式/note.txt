
第２０章　正则表达式


本章内容


定义正则表达式
正则表达式基础
扩展正则表达式
创建正则表达式


在shell脚本中成功运用sed编辑器和gawk程序的关键在于熟练使用正则表达式

如何在sed编辑器和gawk程序中创建正则表达式来过滤出需要的数据


２０．１　　什么是正则表达式

２０．１．１　　定义

正则表达式所定义的模式模板(pattern template)
linux工具可以用它来过滤文本。linux工具(比如sed编辑器或gawk程序)能够在处理数据时使用正则表达式对数据
进行模式匹配。

正则表达式模式利用通配符来描述数据流中的一个或多个字符。linux中有很多场景都可以使用通配符来描述不确定的数据

星号通配符允许你值列出满足特定条件的文件


２０．１．２　　正则表达式的类型

使用正则表达式最大的问题在于有不止一种类型的正则表达式。
linux中的不同应用程序可能会用到不同类型的正则表达式

正则表达式是通过正则表达式引擎(regular expression engine)实现的。
正则表达式引擎是一套底层软件，负责解释正则表达式模式并使用这些模式进行文本匹配


在linux中，有两种流行的正则表达式引擎：

１．POSIX基础正则表达式(basic regular expression ,BRE)引擎
２．POSIX扩展正则表达式(extended regular expression ,ERE)引擎


sed编辑器只符合BRE引擎规范的子集。

POSIX BRE引擎通常出现在依赖正则表达式进行文本过滤的编程语言中。它为常见模式提供了高级模式符号和特殊符号，
比如匹配数字，单词以及按字母排序的字符。gawk程序用ERE引擎来处理它的正则表达式模式


２０．２　定义BRE模式

最基本的BRE模式是匹配数据流中的文本字符。

２０．２．１　　纯文本

echo "this is a test" | sed -n '/test/p'


一旦正则表达式匹配了文本字符串中任意位置上的模式，它会将字符串传回linux工具

关键在于将正则表达式模式匹配到数据流文本上。第一个原则：正则表达式模式都区分大小写。这意味着它们只会匹配大小写相符合的模式

在正则表达式中，你不用写出整个单词。只要定义的文本出现在数据流中，正则表达式就能匹配


完整的正则表达式文本并未在数据流中出现，因此匹配失败，sed编辑器不会显示任何文本
可以在正则表达式中使用空格和数字，在正则表达式中，空格和其他的字符并没有什么区别


如果你在正则表达式中定义了空格，那么它必须出现在数据流中。甚至可以创建匹配多个连续空格的正则表达式模式
单词间有两个空格的行匹配正则表达式模式。这是用来查看文本文件中空格问题的好办法


２０．２．２　　特殊字符

.*[]^${}\+?|()

如果要用某个特殊字符作为文本字符，要用反斜线(\)来转义


示例，比如要查找文本中的美元符号，只要在它前面加个反斜线


sed -n '/\$/p' data2


由于反斜线是特殊字符，如果要在正则表达式模式中使用它，你必须对其转义，这样就产生了两个反斜线


要使用正斜线，也需要进行转义


２０．２．３　　锚字符(^$)


默认情况下，当指定一个正则表达式模式时，只要模式出现在数据流中的任何地方，它就能匹配。
有两个特殊字符可以用来将模式锁定在数据流中的行首或行尾


１．锁定在行首(^)

脱字符(^)定义从数据流中文本行的行首开始的模式。如果模式出现在行首之外的位置，正则表达式模式则无法匹配


要用脱字符，就必须将它放在正则表达式中指定的模式前面


echo "Books are great " | sed -n '/^Book/p'

脱字符会在每个由换行符决定的新数据行的行首检查模式

只要模式出现在新行的行首，脱字符就能够发现它

如果你将脱字符放到模式开头之外的其他位置，就不能其他取首字符的作用



２．锁定在行尾（$）

3.组合锚点

sed编辑器用删除命令d来删除匹配该正则表达式模式的行，因此删除了文本中的所有空白行。这是从文档中删除空白行的有效方法



２０．２．４　　点号字符　　.
20.2.5  字符组　　[]

20.2.6  排除型字符组 [^]


20.2.7  区间　　[0-9][a-z]
20.2.8 　特殊的字符组
比如　[[:lower]]

20.2.9  型号　　* 匹配０次或多次



２０．３　　扩展正则表达式

２０．３．１　　问号　　？　　匹配０次或１次
２０．３．２　　加号　　＋　　匹配至少１次
２０．３．３　　使用花括号　
{m} ：　正则表达式准确出现m次
{m,n}:正则表达式至少出现m次，至多出现n次


gawk程序　的--re- interval命令行选项才能识别正则表达式间隔


２０．３．４　　管道符号　　｜　　是or的意思

２０．３．５　　表达式分组　　（）
正则表达式模式也可以用圆括号进行分组。分组之后表示一个标准字符


２０．４　　正则表达式实战

２０．４．１　目录文件计数


它会对PATH环境变量中定义的目录里的可执行文件进行计数。

首先得将PATH变量解析成单独的目录名

PATH中的每个路径由冒号分隔。要获取可在脚本中使用的目录列表，就必须用空格来替换冒号。
echo $PATH | sed 's/:/ /g'

分离出目录之后，你就可以使用标准for语句中的来遍历每个目录


一旦获得了单个目录，就可以用ls命令来列出每个目录中的文件，并用另一个for语句来遍历每个文件，为文件
计数器增值


cat  countfiles


mypath=$(echo $PATH | sed 's/:/ /g')
count=0
for directory in $mypath
do
    check=$(ls $directory)
    for item in $check
    do
        count=$[ $count + 1 ]
    done
    echo "$directory - $count "
    count=0
done

20.4.2 验证点号号码

２０．４．３　解析邮件地址