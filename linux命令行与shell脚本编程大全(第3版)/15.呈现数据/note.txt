第１５章　呈现数据

本章内容

再探讨重定向
标准输入和输出
报告错误
丢弃数据
创建日志文件



前面出现的脚本都是通过将数据打印在屏幕上或将数据重定向到文件中来显示信息
本章演示，如何将脚本的输出重定向到Linux系统的不同位置

１５．１　理解输入和输出


有两种显示脚本输出的方法：

1.在显示器屏幕上显示输出
2.将输出重定向到文件中

这两种方法要么将数据输出全部显示，要么都不显示、

下面演示如何用标准的linux输入和输出系统来将脚本输出导向特定位置


15.1.1  标准文件描述符

linux系统将每个对象当做文件处理。这包括输入和输出进程。linux用文件描述符(file descriptor)来标识每个文件对象。文件描述符是一个非负整数，可以唯一标识会话中打开的文件。每个进程一次最多可以有九个文件描述符。出于特殊目的，bash shell 保留了前三个文件描述符(0,1,2)

linux的标准文件描述符

文件描述符      缩写           描述
0         STDIN             标准输入
1          STDOUT           标准输出
2           STDERR          标准错误

这三个特殊文件描述符会处理脚本的输入和输出。shell用它们将shell默认的输入和输出导向到相应的位置。

1. STDIN

STDIN文件描述符代表shell的标准输入。对终端来说，标准输入就是键盘。shell从STDIN文件描述符对应的键盘获得输入，在用户输入时处理每个字符

在使用输入重定向符号(<)时，linux会用重定向指定的文件来替换标准输入文件描述符。
它会读取文件并提取数据，就如同它是键盘上键入的

许多bash命令能接受STDIN的输入，尤其是没有在命令行上指定文件的话

当在命令行上只输入cat命令时，它会从STDINj接受输入。输入一行，cat命令就会显示出一行

但也可以通过STDIN重定向符号强制cat命令接受来自另一个非STDIN文件的输入

现在cat命令用testfile文件中的行作为输入。你可以使用这种技术将数据输入到任何能从STDIN接受数据的shell命令中

2.STDOUT
STDOUT文件描述符代表shell的标准输出。在终端界面上，标准输出就是终端显示器。shell的所有输出(包括shell中运行的程序和脚本)会被定向大标准输出中，也就是显示器

默认情况下，大多数bash命令会将输出导向STDOUT文件描述符。

通过输出重定向符号，通常会显示到显示器的所有输出会被shell重定向到指定的重定向文件。
你也可以将数据追加到某个文件。这个可以>>符号

who命令生成的输出会被追加到tt文件中已有数据的后面
但是，如果你对脚本使用了标准输出重定向，

当命令生成错误消息时，shell并未将错误消息重定向到输出重定向的文件。shell创建了输出重定向文件，但无偶粗消息却显示在了显示器屏幕上。

shell对于错误消息的处理是跟普通输出分开的。如果你创建了在后台模式下运行的shell脚本，通常你必须依赖发送到日志文件的输出消息。
3.STDERR

shell通过特殊的STDERR文件描述符来处理错误消息。STDERR文件描述符代表shell的标准错误输出。
shell或shell中运行的程序和脚本出错时生成的错误消息都会发送到这个位置

默认情况下，STDERR文件描述符会和STDOUT文件描述符指向同样的地方。默认情况下，错误消息也会输出到显示器输出中

STDERR并不会随着STDOUT的重定向而发送改变。使用脚本时，将错误错误消息保存到日志文件中

15.1.2  重定向错误

已经知道了如何用重定向符号来重定向STDOUT数据。重定向STDERR数据也没有太大差别，只要在使用重定向符号时定义STDERR文件描述符就可以啦

1.只重定向错误

STDERR文件描述符被设成2.可以选择只重定向错误消息，将该文件描述符值放在重定向符号前。该值必须进放在重定向符号前，否则不会工作

ls -al badfile 2> tt

用这种方法，shell会只重定向错误消息，而非普通数据。
ls命令的正常STDOUT输出仍然会发送到默认的STDOUT文件描述符，也就是显示器。
由于该命令将文件描述符2的输出(STDERR)重定向到一个输出文件，shell会将生成的所有错误消息直接发送到指定的重定向文件中

2.重定向错误和数据

如果想重定向错误和正常输出，必须用两个重定向符号。需要在符号前面加上待重定向数据所对应的文件描述符，然后指向用于保存数据的输出文件

root@lk-PC:/home/lk# ls -al love  dd 2> ts  1> ts3

可用这种方法将脚本的正常输出和脚本生成的错误消息分离开来。轻松识别错误信息

如果愿意，也可以将STDERR,STDOUT的输出重定向到同一个输出文件。
可以使用特殊的重定向符号&>

当使用&>符号时，命令生成的所有输出都会发送到同一位置，包括数据和错误

15.2 在脚本中重定向输出

可以在脚本中用STDOUT,STDERR文件描述符以在多个位置生成输出，只要简单地重定向相应的文件描述符就行了。有两种方法在脚本中重定向输出：
1.临时重定向行输出
2.永久重定向脚本中的所有命令

15.2.1  临时重定向

在重定向到文件描述符时，必须在文件描述符数字前加一个&

echo "sfads" >&2

这行会在脚本的STDERR文件描述符所指向的位置显示文本，而不是通常的STDOUT.

默认情况下，linux会将STDERR导向STDOUT.但是，如果你在运行脚本时重定向了STDERR,脚本中所有导向STDERR的文本都会被重定向

通过STDOUT显示的文本显示在了屏幕上，而发送给STDERR的echo语句的文本则被重定向到了输出文件

这个方法非常适合在脚本中生成错误消息

15.2.2  永久重定向

可以用exec命令告诉shell在脚本执行期间重定向某个特定文件描述符

exec命令会启动一个新的shell并将STDOUT文件描述符重定向到文件。脚本中发给STDOUT的所有输出会被重定向到文件

可以在脚本执行过程中重定向STDOUT

这个脚本用exec命令来讲发给STDERR的输出重定向到文件testerror.
注意，一旦重定向了STDOUT,STDERR,就很难再将它们重定向回原来的位置

15.3  在脚本中重定向输入

exec命令允许将STDIN重定向到linux系统上的文件中

exec 0< testfile

这个命令会告诉shell应该从文件testfile中获取输入，而不是STDIN。这个重定向只要在脚本需要输入时就会

前面介绍了如何使用read命令读取用户咋键盘上输入的数据。将STDIN重定向到文件后，当read命令试图从STDIN读入数据时，它会到文件去取数据，而不是键盘
这是在脚本中从待处理的文件中读取数据的好方法。Linux系统管理员的一项日常工作就是从日志文件中读取数据并处理

15.4  创建自己的重定向


在脚本中重定向输入和输出时，并不局限于这3个默认的文件描述符。
在shell中最多可以有9个打开的文件描述符。可以将其他的6个(3~8)文件描述符中的任意一个分配给文件，然后在脚本中使用它们

15.4.1 创建输出文件描述符

可以用exec命令来给输出分配文件描述符。和标准的文件描述符一样，一旦将另一个文件描述符分配给一个文件，这个重定向会一直有效，直到你重新分配 。

也可以不用创建新文件，而是使用exec命令来讲输出追加到现有文件中

15.4.2  重定向文件描述符


下面介绍如何恢复已经重定向的文件描述符。你可以分配另外一个描述符给标准文件描述符。
这意味着你可以将STDOUT的原来位置重定向到另一个文件描述符，然后再利用该文件描述符重定向回STDOUT

这是一种在脚本中临时重定向输出的常用做法


15.4.3  创建输入文件描述符

可以用和重定向输出文件描述符同样的办法重定向输入文件描述符。在重定向到文件之前，先将STDIN文件描述符保存到另外一个文件描述符，然后在读取完文件之后再将STDIN恢复到它原来的位置

文件描述符6用来保存STDIN的位置。然后脚本将STDIN重定向到一个文件。read命令的所有输入都来自重定向后的STDIN（也就是输入文件）

在读取了所有行之后，脚本会在STDIN重定向到文件描述符6，从而将STDIN恢复到原先的位置。该脚本用来另外一个read命令来测试STDIN是否恢复了正常。这次它会等待键盘的输入

15.4.4 创建读写文件描述符
