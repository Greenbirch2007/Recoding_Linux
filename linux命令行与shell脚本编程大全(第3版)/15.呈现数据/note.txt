第１５章　呈现数据

本章内容

再探讨重定向
标准输入和输出
报告错误
丢弃数据
创建日志文件



前面出现的脚本都是通过将数据打印在屏幕上或将数据重定向到文件中来显示信息
本章演示，如何将脚本的输出重定向到Linux系统的不同位置

１５．１　理解输入和输出


有两种显示脚本输出的方法：

1.在显示器屏幕上显示输出
2.将输出重定向到文件中

这两种方法要么将数据输出全部显示，要么都不显示、

下面演示如何用标准的linux输入和输出系统来将脚本输出导向特定位置


15.1.1  标准文件描述符

linux系统将每个对象当做文件处理。这包括输入和输出进程。linux用文件描述符(file descriptor)来标识每个文件对象。文件描述符是一个非负整数，可以唯一标识会话中打开的文件。每个进程一次最多可以有九个文件描述符。出于特殊目的，bash shell 保留了前三个文件描述符(0,1,2)

linux的标准文件描述符

文件描述符      缩写           描述
0         STDIN             标准输入
1          STDOUT           标准输出
2           STDERR          标准错误

这三个特殊文件描述符会处理脚本的输入和输出。shell用它们将shell默认的输入和输出导向到相应的位置。

1. STDIN

STDIN文件描述符代表shell的标准输入。对终端来说，标准输入就是键盘。shell从STDIN文件描述符对应的键盘获得输入，在用户输入时处理每个字符

在使用输入重定向符号(<)时，linux会用重定向指定的文件来替换标准输入文件描述符。
它会读取文件并提取数据，就如同它是键盘上键入的

许多bash命令能接受STDIN的输入，尤其是没有在命令行上指定文件的话

当在命令行上只输入cat命令时，它会从STDINj接受输入。输入一行，cat命令就会显示出一行

但也可以通过STDIN重定向符号强制cat命令接受来自另一个非STDIN文件的输入

现在cat命令用testfile文件中的行作为输入。你可以使用这种技术将数据输入到任何能从STDIN接受数据的shell命令中

2.STDOUT
STDOUT文件描述符代表shell的标准输出。在终端界面上，标准输出就是终端显示器。shell的所有输出(包括shell中运行的程序和脚本)会被定向大标准输出中，也就是显示器

默认情况下，大多数bash命令会将输出导向STDOUT文件描述符。

通过输出重定向符号，通常会显示到显示器的所有输出会被shell重定向到指定的重定向文件。
你也可以将数据追加到某个文件。这个可以>>符号

who命令生成的输出会被追加到tt文件中已有数据的后面
但是，如果你对脚本使用了标准输出重定向，

当命令生成错误消息时，shell并未将错误消息重定向到输出重定向的文件。shell创建了输出重定向文件，但无偶粗消息却显示在了显示器屏幕上。

shell对于错误消息的处理是跟普通输出分开的。如果你创建了在后台模式下运行的shell脚本，通常你必须依赖发送到日志文件的输出消息。
3.STDERR

shell通过特殊的STDERR文件描述符来处理错误消息。STDERR文件描述符代表shell的标准错误输出。
shell或shell中运行的程序和脚本出错时生成的错误消息都会发送到这个位置

默认情况下，STDERR文件描述符会和STDOUT文件描述符指向同样的地方。默认情况下，错误消息也会输出到显示器输出中

STDERR并不会随着STDOUT的重定向而发送改变。使用脚本时，将错误错误消息保存到日志文件中

15.1.2  重定向错误

已经知道了如何用重定向符号来重定向STDOUT数据。重定向STDERR数据也没有太大差别，只要在使用重定向符号时定义STDERR文件描述符就可以啦

1.只重定向错误

STDERR文件描述符被设成2.可以选择只重定向错误消息，将该文件描述符值放在重定向符号前。该值必须进放在重定向符号前，否则不会工作

ls -al badfile 2> tt

用这种方法，shell会只重定向错误消息，而非普通数据。
ls命令的正常STDOUT输出仍然会发送到默认的STDOUT文件描述符，也就是显示器。
由于该命令将文件描述符2的输出(STDERR)重定向到一个输出文件，shell会将生成的所有错误消息直接发送到指定的重定向文件中

2.重定向错误和数据

如果想重定向错误和正常输出，必须用两个重定向符号。需要在符号前面加上待重定向数据所对应的文件描述符，然后指向用于保存数据的输出文件

root@lk-PC:/home/lk# ls -al love  dd 2> ts  1> ts3

可用这种方法将脚本的正常输出和脚本生成的错误消息分离开来。轻松识别错误信息

如果愿意，也可以将STDERR,STDOUT的输出重定向到同一个输出文件。
可以使用特殊的重定向符号&>

当使用&>符号时，命令生成的所有输出都会发送到同一位置，包括数据和错误

15.2 在脚本中重定向输出

可以在脚本中用STDOUT,STDERR文件描述符以在多个位置生成输出，只要简单地重定向相应的文件描述符就行了。有两种方法在脚本中重定向输出：
1.临时重定向行输出
2.永久重定向脚本中的所有命令

15.2.1  临时重定向

在重定向到文件描述符时，必须在文件描述符数字前加一个&

echo "sfads" >&2

这行会在脚本的STDERR文件描述符所指向的位置显示文本，而不是通常的STDOUT.

默认情况下，linux会将STDERR导向STDOUT.但是，如果你在运行脚本时重定向了STDERR,脚本中所有导向STDERR的文本都会被重定向

通过STDOUT显示的文本显示在了屏幕上，而发送给STDERR的echo语句的文本则被重定向到了输出文件

这个方法非常适合在脚本中生成错误消息

15.2.2  永久重定向

可以用exec命令告诉shell在脚本执行期间重定向某个特定文件描述符

exec命令会启动一个新的shell并将STDOUT文件描述符重定向到文件。脚本中发给STDOUT的所有输出会被重定向到文件

可以在脚本执行过程中重定向STDOUT

这个脚本用exec命令来讲发给STDERR的输出重定向到文件testerror.
注意，一旦重定向了STDOUT,STDERR,就很难再将它们重定向回原来的位置

15.3  在脚本中重定向输入

exec命令允许将STDIN重定向到linux系统上的文件中

exec 0< testfile

这个命令会告诉shell应该从文件testfile中获取输入，而不是STDIN。这个重定向只要在脚本需要输入时就会

前面介绍了如何使用read命令读取用户咋键盘上输入的数据。将STDIN重定向到文件后，当read命令试图从STDIN读入数据时，它会到文件去取数据，而不是键盘
这是在脚本中从待处理的文件中读取数据的好方法。Linux系统管理员的一项日常工作就是从日志文件中读取数据并处理

15.4  创建自己的重定向


在脚本中重定向输入和输出时，并不局限于这3个默认的文件描述符。
在shell中最多可以有9个打开的文件描述符。可以将其他的6个(3~8)文件描述符中的任意一个分配给文件，然后在脚本中使用它们

15.4.1 创建输出文件描述符

可以用exec命令来给输出分配文件描述符。和标准的文件描述符一样，一旦将另一个文件描述符分配给一个文件，这个重定向会一直有效，直到你重新分配 。

也可以不用创建新文件，而是使用exec命令来讲输出追加到现有文件中

15.4.2  重定向文件描述符


下面介绍如何恢复已经重定向的文件描述符。你可以分配另外一个描述符给标准文件描述符。
这意味着你可以将STDOUT的原来位置重定向到另一个文件描述符，然后再利用该文件描述符重定向回STDOUT

这是一种在脚本中临时重定向输出的常用做法


15.4.3  创建输入文件描述符

可以用和重定向输出文件描述符同样的办法重定向输入文件描述符。在重定向到文件之前，先将STDIN文件描述符保存到另外一个文件描述符，然后在读取完文件之后再将STDIN恢复到它原来的位置

文件描述符6用来保存STDIN的位置。然后脚本将STDIN重定向到一个文件。read命令的所有输入都来自重定向后的STDIN（也就是输入文件）

在读取了所有行之后，脚本会在STDIN重定向到文件描述符6，从而将STDIN恢复到原先的位置。该脚本用来另外一个read命令来测试STDIN是否恢复了正常。这次它会等待键盘的输入

15.4.4 创建读写文件描述符

也可以打开单个文件描述符来作为输入和输出。可以用同一个文件描述符对同一个文件进行读写

注意，如果对同一个文件进行数据读写，shell会维护一个内部指针，指明在文件中的当前位置。任何读或写都会从文件指针上次的位置开始。

这个例子用例exec命令将文件描述符3分配给文件testfile以进行文件读写。它通过分配好的文件描述符，使用read命令读取文件中的第一行，然后将这一行显示在STDOUT上。
最后，它用echo语句将一行数据写入由同一个文件描述符打开的文件中

在linux系统中，lsof命令位于/usr/bin目录中。要想以普通用户账户来运行它，必须通过全路径来引用
/usr/bin/lsof

该命令会产生大量的输出。它会显示当前Linux系统上打开的每个文件的有关信息。这包括后台运行的所有进程以及登录到系统的任何用户
有大量的命令行选项和参数可以用来帮助过滤lsof的输出。最常用的有-p和-d,前者允许指定进程ID(PID),后者允许指定要显示的文件描述符编号
要想知道进程的当前PID，可以用特殊环境变量$$(shell会将它设为当前PID).-a选项用来对其他两个选项的结果执行布尔AND运算

lsof -a -p $$ -d 0,1,2

上例子显示了当前进程(bash shell)的默认文件描述符(0,1,2)
现在可以看下在打开多个替代性文件描述符的脚本中使用lsof命令的机构
当脚本向文件中写入数据时，它会从文件指针所处的位置开始。read命令读取了第一行数据，所以它使得文件指针指向了第二行数据的第一个字符。
在echo语句将数据输出到文件时，它会将数据放在文件指针的当前位置，覆盖了该位置的已有数据

15.4.5  关闭文件描述符

如果你创建了新的输入或输出文件描述符，shell会在脚本退出时自动关闭它们。然而在有些情况下，你需要在脚本结束前手动关闭文件描述符

要关闭文件描述符，将它重定向到特殊符号&-，应该加入
exec 3>&-

该语句会关闭文件描述符3，不再在脚本中使用它。

一旦关闭了文件描述符，就不能在脚本中向它写入任何数据，否则shell会生成错误消息

在关闭文件描述符时还要注意。如果随后你在脚本中打开了同一个输出文件，shell会用一个新文件来替换已有文件。这意味这如果你输出数据，它就会覆盖已有文件

在想test17file文件发送一个数据字符串并关闭该文件描述符之后，脚本用了cat命令来显示文件的内容。
下一步，脚本重新打开了该输出文件并向它发送了另一个数据字符串。当显示该输出文件的内容时，你所能看到的只有第二个数据字符串。shell覆盖了原有的输出文件

15.5 列出打开的文件描述符

lsof命令会列出整个linux系统打开的所有文件描述符。注意，它会想非系统管理员用户提供linux系统的信息

该脚本创建了3个替代性文件描述符，两个作为输出(3,6),一个作为输入(7).在脚本运行lsof命令时，可以在输出中看到新的文件描述符。
文件名显示了文件描述符所使用技能的文件的完整路径名。它将每个文件都显示成REG类型的，这说明它们是文件系统中的常规文件


15.6  阻止命令输出

如果在运行在后台的脚本出现错误消息，shell会通过电子邮件将它们发给进程的属主。
要解决这个问题，可以将STDERR重定向到一个叫做null文件的特殊文件。null文件跟它的名字很像，文件里什么都没有。shell输出到null文件的任何数据都不会保存，全部都被丢掉

在linux系统上null文件的标准位置是/dev/null.你重定向到该位置的任何数据都会被丢掉，不会显示。

这是避免出现错误消息，也无需保存它们的一个常用方法

ls -al badfile test16 2> /dev/null

也可以在输入重定向中将/dev/null作为输入文件。由于/dev/null文件不含有任何内容，程序员通常用它来快速清楚现有文件中的数据，而不用先删除文件再重新创建

文件testfile仍然存在系统上，但现在它是空文件。这是清除日志文件的一个常用方法，因为日志文件必须时刻准备等待引用程序操作


15.7  创建临时文件

linux系统有特殊的目录，专供临时文件使用。linux使用/tmp目录来存放不需要永久保留的文件。大多数linux飞信哪个班配置了系统在启动时自动删除/tmp目录的所有文件
系统上的任何用户账户都有权限在读写/tmp目录中的文件。这个特性为你提供了一种创建临时性文件的简单方法，而且还不用操心清理工作
有个特殊命令可以用来创建临时文件。mktemp命令可以在/tmp目录中创建一个唯一的临时文件。shell会创建这个文件，但不用默认的umask值。它会将文件的读写权限分配给文件的属主，并将你设成文件的属主。
一旦创建了文件，你就在脚本中有了完整的读写权限，但其他人没法访问它(除了roo用户)

15.7.1  创建本地临时文件

默认情况下，mktemp会在本地目录中创建一个文件。要用mktemp命令在本地目录中创建一个临时文件，你只要指定一个文件名模板即可。
模板可以包含任意文本文件名，在文件名末尾加上6个X即可

mktemp testing.XXXXX

mktemp命令会用6个字符码替换这个6个X,从而保证文件名在目录中是唯一的。你可以创建多个临时文件，它可以保证每个文件都是唯一的

mktemp命令的输出正是它所创建的文件的名字。在脚本中灰姑娘使用mktemp命令时，可能要将文件名保存在变量，这样就能在后面的脚本中引用了

这个脚本用mktemp命令来创建临时文件并将文件名赋给$tempfile变量。接着将这个临时文件作为文件描述符3的输出重定向文件。在将临时文件名显示在STDOUT之后，向临时文件中写入了几行文本，然后关闭了文件描述符。最后，显示出临时文件的内容，并用rm命令将其删除


15.7.2  在/tmp目录创建临时文件

-t选项会强制mktemp命令在系统的临时目录来创建该文件。在用这个特性时，mktemp命令会返回用来创建临时文件的全路径，而不是只有文件名

由于mktemp命令返回了全路径名，你可以在linux系统上的任何目录下引用该临时文件，不管临时目录在哪里

在mktemp创建临时文件时，它会将全路径名返回给变量。这样你就能在任何命令中使用该值来引用临时文件了


15.7.3创建临时目录

-d选项告诉mktemp命令来创建一个临时目录而不是临时文件。这样你就能用该目录进行任何需要的操作了。比如创建其他的临时文件

这个脚本在当前目录创建了一个目录，然后它用cd命令进入该目录，并创建了两个临时文件。之后这两个临时文件被分配给文件描述符，用来存储脚本的输出

15.8 记录消息

将输出同时发送到显示器和日志文件，你不用将输出重定向两次，只要用特殊的tee命令就行

tee命令相当于管道的一个T型接头。它将从STDIN过来的数据同时发往两处
一处是STDOUT,另一处是tee命令行所指定的文件名：
tee filename

由于tee会重定向来自STDIN的数据，你可以用它配合管道命令来重定向输出

date | tee testfile


输出出现在了STDOUT中，同时也写入了指定的文件中。注意，默认情况下，tee命令会在每次使用时覆盖输出文件内容

要想追加数据到文件中，必须用-a选项

利用这个方法，既能将数据保存在文件中，也能将数据显示在屏幕上

现在你就可以在为用户显示输出的同时再永久保存一份输出内容了


15.9  实例

文件重定向常见于脚本需要读入文件和输出文件时。这个样例搅拌都可以完成。它读取.csv格式的数据文件，输出SQL Insert语句来将数据插入数据库

shell脚本使用命令行参数指定待读取的.csv文件。.csv格式用于从电子表格中导出数据，所以你可以把数据库数据放入电子表格中，把电子表格保存成.csv格式，读取文件，然后创建insert语句将数据插入mysql数据中
这个脚本出现了三处重定向的操作。while循环使用read语句从数据文本中读取文本。注意done语句中出现的重定向符号

当运行脚本时，$1代表第一个命令行参数，它指明了待读取数据的文件。read语句会使用IFS字符解析读入的文本，我们子脚本呢种将IFS指定为逗号。
脚本中另外两处重定向操作出现在同一条语句中

这条语句包含一个追加重定向(双大于号)和一个输入追加重定向(双小于号)。
输出重定向将cat命令的输出追加到由$outfile变量指定的文件中。cat命令的输入不再取自标准输入，而是被重定向到脚本中存储的数据。EOF符号标记了追加到文件中的数据的起止

上面的文本生成了一个标准的sql语句。注意，其中的数据会由变量来替换，变量中内容则是由read语句存入的

所以基本上while循环一次读取一行数据，将这些值放入insert语句模板中，然后将结果输出文件中