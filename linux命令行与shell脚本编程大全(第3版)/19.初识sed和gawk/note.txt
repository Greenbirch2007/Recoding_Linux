

第19章　　　初识sed和gawk


本章内容

学习sed编辑器
gawk编辑器入门
sed编辑器基础


shell脚本最常见的一个用途就是处理文本文件。检查日志文件，读取配置文件，处理数据元素，shell脚本可以帮助我们将文本文件中各种数据的日常处理任务自动化。
处理任何类型的数据，主要是用到sed和gawk


19.1 文本处理

如何轻松实现自动格式化，插入，修改或删除文本元素的简单命令行编辑器

两个命令行编辑器：sed和gawk


19.1.1  sed编辑器



sed编辑器被称为流编辑器(stream editor),和普通的交互式文本编辑器签好相反。在交互式文本编辑器中(如vim)
你可以用键盘命令来交互式地插入，删除或替换数据中的文本。流编辑其则会在编辑器处理数据之前基于预先提供的一组规则
来编辑数据流


sed编辑器可以根据命令来会处理数据流中的数据，这些命令要么从命令行中输入，要么存储在一个命令文本文件中。

sed编辑器可以执行如下操作：
１．一次从输入中读取一行数据
２．根据所提供的编辑器命令匹配数据
３．按照命令修改流中的数据
４．将新的数据输出到STDOUT

在流编辑器将所有命令与一行数据匹配完毕后，它会读取下一行数据并重复这个过程。
在流编辑器处理完流中的所有数据行后，它就会终止。

sed options script file



script参数指定了应用于流数据上的单个命令。如果需要多个命令，要么使用-e选型在命令行中指定，要么使用-f选项在单独的文件中
指定。有大量的命令可用来处理数据。

１．在命令行定义编辑器命令

默认情况下，sed编辑器会将指定的命令应用到STDIN输入流上。这样你可以直接将数据通过管道输入sed编辑器处理。

sed命令瞬间返回执行后的数据。在处理每行数据的同时，结果也显示出来了。
可以在sed编辑器处理完整个文件之前就开始观察结果

注意，sed编辑器并不会修改文本文件的数据。它只会将修改后的数据发送到STDOUT.

２．在命令行使用多个编辑器命令

要在sed命令行上实行多个命令时，只要用-e即可

sed -e 's/brown/green/; s/dog/cat/' data1

两个命令都作用到文件中的每行数据上。命令之间必须用分号隔开，并且在命令末尾和分号之间不能有空格

也可以如下表述

sed -e '
s/brown/green/
s/dog/cat/  data1



要在封尾单引号所在行结束命令。bash shell一旦发现了封尾的单引号，就会执行命令。
开始后，sed就会将你指定的每条命令应用到文本文件中的每一行上


３．　从文件中读取编辑器命令

如果有大量要处理的sed命令，那么将它们放进一个单独的文件中会更好

可以在sed命令中用-f选项来指定文件

cat s1.sed
s/brown/green/
s/fox/elephant/
s/dog/cat/


sed -f s1.sed data1


在这种情况下，不用在每条命令后吗放一个分号。sed编辑器知道每行都是一条单独的命令。跟在命令行输入命令一样。

sed编辑器会从指定文件汇总读取命令，并将它们应用到数据文件中的每一行上

技巧，可以将sed编辑器脚本的扩展名设置为.sed



19.1.2  gawk程序


gawk程序可以做如下的事情：
１．定义变量来保存数据
２．使用算术和字符串操作符来处理数据
３．使用结构化编辑概念(比如if-then语句和循环）来为数据增加处理逻辑
４．通过提取数据文件中的数据元素，将其重新排列或格式化，生成格式化报告


gawk程序的报告生成能力通常用来从大文本文件中提取数据元素，并将它们格式化成可读的报告。
其中常用的是格式化日志文件。
在日志文件中找出错误行很难，gawk程序可以让你从日志文件中过滤出需要的数据元素，然后你可以将其格式化，
使得重要的数据更易于阅读

１．gawk命令格式

gawk options program file


gawk的强大之处在于程序脚本。可以写脚本来读取文本行的数据，然后处理并显示数据，创建任何类型的输出报告


２．从命令行读取程序脚本

gawk程序脚本用一对花括号来定义。你必须将脚本命令放到两个花括号({})中。
由于gawk命令行假定脚本是的单个文本字符串。你还必须将脚本放到单引号中。

gawk '{print "Hello World!"}'

要终止gawk程序，你必须表明数据流已经结束了。bash shell提供了一个组合键来生成EOF(End-of-File)字符。
Ctrl+D 组合键　会在bash中产生一个EOF字符。这个组合键能够终止该gawk程序并返回到命令行界面提示符下

３．使用数据字段变量

gawk的主要特性之一是其处理文本文件中的数据的能力。它会自动给一行中的每个数据元素分配一个变量。默认情况下，gawk会
将如下变量分配给它在文本行中发现的数据字段：

$0:代表整个文本行
$1：代表文本行中的第１个数据字段
$n：代表文本行中的第n个数据字段

在文本行中，每个数据字段都是通过字段分隔符划分的。gawk在读取一行文本时，会用预定义的字段分隔符划分每个数据字段。
gawk中默认的字段分隔符是任意的空白字符

gawk '{print $1}' data1
读取每行文本的第一个数据字段

如果你要读取采用了其他字段分隔符的文件，可以用-F选项指定

gawk -F: '{print $1}' /etc/passwd


上面简单显示了系统中密码内文件的第一个数据字段。由于/etc/passwd文件用冒号来分隔数字字段，因为如果要划分开
每个数据，则必须在gawk选项中将冒号指定为字段分隔符。


４．　在程序脚本中使用多个命令

gawk编程语言允许你将多条命令组合成一个正常的程序。要在命令行上的程序脚本中使用多条命令，只要在命令之间放个分号即可

echo "My name is Rich" | gawk '{$4="Greenbirch";print $0}'

也可以用次提示符一次一行地输入程序脚本命令

５．　从文件中读取程序

跟sed编辑器一样，gawk编辑器允许将程序存储到文件中，然后再在命令行中引用


{print $1 "'s home directory is " $6}


gawk -F: -f s2.gawk /etc/passwd

s2.gawk程序脚本再次使用print命令打印/etc/passwd文件的主目录数据字段(字段变量$6),以及userid数据字段(字段变量$1)

可以在程序文件中指定多条命令。要这么做的话，只要一条命令放一行即可，不需要使用分号


{
text = "'s home directory is"
print $1 text $6
}

gawk -F: -f s3.gawk /etc/passwd

s3.gawk程序脚本定义了一个变量来保存print命令中用到的文本字符串。注意，gawk程序在引用变量值时并未像shell脚本一样使用美元符号


６．　在处理数据前运行脚本


gawk还允许指定程序脚本何时运行。默认情况下，gawk会从输入中读取一行文本，然后针对该行的数据执行程序脚本。
有时可能需要在处理数据前运行脚本，比如为报告创建标题。
BEGIN关键字就用来做这个的。它会强制gawk在读取数据前执行BEGIN关键字后指定的程序脚本

gawk 'BEGIN {print "Hello World!"}'


如果想使用正常的程序脚本中处理数据，必须用另一个脚本区域来定义程序

Line 1
Line 2
Line 3

gawk 'BEGIN {print "The data3 File Contents:"}'
{print $0}' data3

在gawk执行了BEGIN脚本后，它会用第二段脚本来处理文件数据。

７．　在处理数据后运行脚本


与BEGIN 关键字类似，END关键字允许你指定一个程序脚本，gawk会在读完数据后执行它



当gawk程序打印完文件内容后，它会执行END脚本中的命令。这是在处理完所有正常数据后给报告添加页脚的最佳方法


可以将所有这些内容放到一起组合成一个漂亮的小程序脚本文件，用它从一个简单的数据文件中创建一份完整的报告

s4.gawk


BEGIN {
print "The latest list of users and shells"
print " UserID \t Shell"
print "-------\t------"
FS=":"
}

{
print $1 "       \t     " $7
}

END {
print "This concludes the listing"
}


gawk -f s4.gawk /etc/passwd


与预想的一样，BEGIN脚本创建了标题，程序脚本处理特定数据文件(/etc/passwd)中的信息，END脚本生成页脚

１９．２　sed编辑器基础　　（写报告用？）

成功使用sed编辑器的关键在于掌握其各式各样的命令和格式，它们能够帮助你定制文本编辑行为。

１９．２．１　　更多的替换选项


s命令(substitute)来在行中替换文本呢。

１．替换标记

关于替换命令如何替换字符串中所匹配的模式需要注意主页你到哪。

sed 's/test/trial/' data4


替换命令在替换多行中的文本时能正常工作，但默认情况下它是只替换每行中出现的第一处。
要让替换命令能够替换一行汇总不同地方出现的文本必须使用替换标记(substitution flag)
替换标记会替换命令字符串之后设置

s/pattern/replacement/flags


有４种可用的替换标记


数字，表明新文本将替换第几处模式匹配的地方
g,表明新文本将会替换所有匹配的文本；
p,表明原先行的内容要打印出来
w file,将替换的结果写到文件中

只替换第二行　　sed 's/test/trial/2' data4
替换全部　　　　sed 's/test/trial/g' data4

p替换标记会打印与替换命令中指定的模式匹配的行。这通常与sed的-n选项一起使用

sed -n 's/test/green~~~~/p' data5


-n选项将禁止sed编辑器输出。

ｗ替换标记会产生同样的输出，不会会将输出保存到指定文件中

sed -n 's/test/green~~~~/w  w.txt' data5

sed编辑器的正常输出是在STDOUT中，而只有那些包含匹配模式的行才会保存在指定的输出文件中。


２．替换字符

linux常常替换　正斜线(/)

sed编辑器允许选择其他字符来作为替换命令中的字符串分隔符

sed 's!/bin/bash!/bin/csh!' /etc/passwd

！感叹号被用作字符串分隔符，这样路径名就更容易阅读和理解了


１９．２．２　　使用地址


默认情况下，在sed编辑器中使用的命令会作用于文本数据的所有行。如果只想将命令作用于特定行或某些行，则必须用行寻址(line addressing)

在sed编辑器中有两种形式的行寻址
１．以数字形式表示行区间　　２．　用文本模式来过滤出行


[address] command


address {
command1
command2
command2}

sed编辑器会将指定的每条命令作用到匹配指定地址的行上。
１．数字方式的行寻址

当使用数字方式的行寻址时，可以用行在文本流中的行位置来引用。sed编辑器会将文本流中的第一行编号为１，然后继续按顺序为接下来的行分配行号

在命令汇总指定的地址可以是单个行号，或是起始行号，逗号以及结尾行号指定的一定区间范围内容的行。

sed '2s/dog/cat/' data1

上面sed编辑器只修改地址指定的第二行的文本。　这次使用行地址区间

sed '2,3s/dog/cat/' data1

如果想将命令作用到文本中从某行开始的所有行，可以用特殊地址－－美元符号

sed '2,$s/dog/cat/' data1


2. 使用文本模式过滤器


sed编辑器允许指定文本模式来过滤命令要作用的行。

/pattern/command


必须用正斜线将要指定的pattern封起来。sed编辑器会将命令作用到包含指定文本模式的行上

例如，指向修改用户user1的默认shell,可以使用sed命令

grep user001 /etc/passwd


sed '/user001/s/bash/csh~~~~~~~~/' /etc/passwd


该命令值作用到匹配文本模式的行上。虽然使用固定文本模式能帮你过滤特定的值

sed编辑器在文本模式中采用了一种正则表达式的特性来帮助你创建匹配效果更好的模式

正则表达式允许创建高级文本模式匹配表达式来匹配各种数据。这些表达式结合了一系列通配符，特殊字符以及固定
文本字符来生成能够匹配几乎任何形式文本的简练模式


３．　命令组合

如果需要在单行上执行多条命令，可以用花括号将多条命令组合在一起

sed编辑器会处理地址行处列出的每条命令


sed '2{
s/fox/elepant/
s/dog/cat/
}' data1


两条命令都会作用到该地址上。也可以在一组命令前指定一个地址区间

sed '3,${
s/brown/green~~/
s/lazy/act~~~~/
}' data1

sed编辑器会将所有命令作用到该地址区间内的所有行上

１９．２．３　　删除行