

第19章　　　初识sed和gawk


本章内容

学习sed编辑器
gawk编辑器入门
sed编辑器基础


shell脚本最常见的一个用途就是处理文本文件。检查日志文件，读取配置文件，处理数据元素，shell脚本可以帮助我们将文本文件中各种数据的日常处理任务自动化。
处理任何类型的数据，主要是用到sed和gawk


19.1 文本处理

如何轻松实现自动格式化，插入，修改或删除文本元素的简单命令行编辑器

两个命令行编辑器：sed和gawk


19.1.1  sed编辑器



sed编辑器被称为流编辑器(stream editor),和普通的交互式文本编辑器签好相反。在交互式文本编辑器中(如vim)
你可以用键盘命令来交互式地插入，删除或替换数据中的文本。流编辑其则会在编辑器处理数据之前基于预先提供的一组规则
来编辑数据流


sed编辑器可以根据命令来会处理数据流中的数据，这些命令要么从命令行中输入，要么存储在一个命令文本文件中。

sed编辑器可以执行如下操作：
１．一次从输入中读取一行数据
２．根据所提供的编辑器命令匹配数据
３．按照命令修改流中的数据
４．将新的数据输出到STDOUT

在流编辑器将所有命令与一行数据匹配完毕后，它会读取下一行数据并重复这个过程。
在流编辑器处理完流中的所有数据行后，它就会终止。

sed options script file



script参数指定了应用于流数据上的单个命令。如果需要多个命令，要么使用-e选型在命令行中指定，要么使用-f选项在单独的文件中
指定。有大量的命令可用来处理数据。

１．在命令行定义编辑器命令

默认情况下，sed编辑器会将指定的命令应用到STDIN输入流上。这样你可以直接将数据通过管道输入sed编辑器处理。

sed命令瞬间返回执行后的数据。在处理每行数据的同时，结果也显示出来了。
可以在sed编辑器处理完整个文件之前就开始观察结果

注意，sed编辑器并不会修改文本文件的数据。它只会将修改后的数据发送到STDOUT.

２．在命令行使用多个编辑器命令

要在sed命令行上实行多个命令时，只要用-e即可

sed -e 's/brown/green/; s/dog/cat/' data1

两个命令都作用到文件中的每行数据上。命令之间必须用分号隔开，并且在命令末尾和分号之间不能有空格

也可以如下表述

sed -e '
s/brown/green/
s/dog/cat/  data1



要在封尾单引号所在行结束命令。bash shell一旦发现了封尾的单引号，就会执行命令。
开始后，sed就会将你指定的每条命令应用到文本文件中的每一行上


３．　从文件中读取编辑器命令

如果有大量要处理的sed命令，那么将它们放进一个单独的文件中会更好

可以在sed命令中用-f选项来指定文件

cat s1.sed
s/brown/green/
s/fox/elephant/
s/dog/cat/


sed -f s1.sed data1


在这种情况下，不用在每条命令后吗放一个分号。sed编辑器知道每行都是一条单独的命令。跟在命令行输入命令一样。

sed编辑器会从指定文件汇总读取命令，并将它们应用到数据文件中的每一行上

技巧，可以将sed编辑器脚本的扩展名设置为.sed



19.1.2  gawk程序


gawk程序可以做如下的事情：
１．定义变量来保存数据
２．使用算术和字符串操作符来处理数据
３．使用结构化编辑概念(比如if-then语句和循环）来为数据增加处理逻辑
４．通过提取数据文件中的数据元素，将其重新排列或格式化，生成格式化报告


gawk程序的报告生成能力通常用来从大文本文件中提取数据元素，并将它们格式化成可读的报告。
其中常用的是格式化日志文件。
在日志文件中找出错误行很难，gawk程序可以让你从日志文件中过滤出需要的数据元素，然后你可以将其格式化，
使得重要的数据更易于阅读

１．gawk命令格式

gawk options program file


gawk的强大之处在于程序脚本。可以写脚本来读取文本行的数据，然后处理并显示数据，创建任何类型的输出报告


２．从命令行读取程序脚本

gawk程序脚本用一对花括号来定义。你必须将脚本命令放到两个花括号({})中。
由于gawk命令行假定脚本是的单个文本字符串。你还必须将脚本放到单引号中。

gawk '{print "Hello World!"}'

要终止gawk程序，你必须表明数据流已经结束了。bash shell提供了一个组合键来生成EOF(End-of-File)字符。
Ctrl+D 组合键　会在bash中产生一个EOF字符。这个组合键能够终止该gawk程序并返回到命令行界面提示符下

３．使用数据字段变量

gawk的主要特性之一是其处理文本文件中的数据的能力。它会自动给一行中的每个数据元素分配一个变量。默认情况下，gawk会
将如下变量分配给它在文本行中发现的数据字段：

$0:代表整个文本行
$1：代表文本行中的第１个数据字段
$n：代表文本行中的第n个数据字段

在文本行中，每个数据字段都是通过字段分隔符划分的。gawk在读取一行文本时，会用预定义的字段分隔符划分每个数据字段。
gawk中默认的字段分隔符是任意的空白字符

gawk '{print $1}' data1
读取每行文本的第一个数据字段

如果你要读取采用了其他字段分隔符的文件，可以用-F选项指定

gawk -F: '{print $1}' /etc/passwd


上面简单显示了系统中密码内文件的第一个数据字段。由于/etc/passwd文件用冒号来分隔数字字段，因为如果要划分开
每个数据，则必须在gawk选项中将冒号指定为字段分隔符。


４．　在程序脚本中使用多个命令

gawk编程语言允许你将多条命令组合成一个正常的程序。要在命令行上的程序脚本中使用多条命令，只要在命令之间放个分号即可

echo "My name is Rich" | gawk '{$4="Greenbirch";print $0}'

也可以用次提示符一次一行地输入程序脚本命令

５．　从文件中读取程序

跟sed编辑器一样，gawk编辑器允许将程序存储到文件中，然后再在命令行中引用


{print $1 "'s home directory is " $6}


gawk -F: -f s2.gawk /etc/passwd

s2.gawk程序脚本再次使用print命令打印/etc/passwd文件的主目录数据字段(字段变量$6),以及userid数据字段(字段变量$1)

可以在程序文件中指定多条命令。要这么做的话，只要一条命令放一行即可，不需要使用分号


{
text = "'s home directory is"
print $1 text $6
}

gawk -F: -f s3.gawk /etc/passwd

s3.gawk程序脚本定义了一个变量来保存print命令中用到的文本字符串。注意，gawk程序在引用变量值时并未像shell脚本一样使用美元符号


６．　在处理数据前运行脚本


gawk还允许指定程序脚本何时运行。默认情况下，gawk会从输入中读取一行文本，然后针对该行的数据执行程序脚本。
有时可能需要在处理数据前运行脚本，比如为报告创建标题。
BEGIN关键字就用来做这个的。它会强制gawk在读取数据前执行BEGIN关键字后指定的程序脚本

gawk 'BEGIN {print "Hello World!"}'


如果想使用正常的程序脚本中处理数据，必须用另一个脚本区域来定义程序

Line 1
Line 2
Line 3

gawk 'BEGIN {print "The data3 File Contents:"}'
{print $0}' data3

在gawk执行了BEGIN脚本后，它会用第二段脚本来处理文件数据。

７．　在处理数据后运行脚本


与BEGIN 关键字类似，END关键字允许你指定一个程序脚本，gawk会在读完数据后执行它



当gawk程序打印完文件内容后，它会执行END脚本中的命令。这是在处理完所有正常数据后给报告添加页脚的最佳方法


可以将所有这些内容放到一起组合成一个漂亮的小程序脚本文件，用它从一个简单的数据文件中创建一份完整的报告

s4.gawk


BEGIN {
print "The latest list of users and shells"
print " UserID \t Shell"
print "-------\t------"
FS=":"
}

{
print $1 "       \t     " $7
}

END {
print "This concludes the listing"
}


gawk -f s4.gawk /etc/passwd


与预想的一样，BEGIN脚本创建了标题，程序脚本处理特定数据文件(/etc/passwd)中的信息，END脚本生成页脚

１９．２　sed编辑器基础　　（写报告用？）

成功使用sed编辑器的关键在于掌握其各式各样的命令和格式，它们能够帮助你定制文本编辑行为。

１９．２．１　　更多的替换选项


s命令(substitute)来在行中替换文本呢。

１．替换标记

关于替换命令如何替换字符串中所匹配的模式需要注意主页你到哪。

sed 's/test/trial/' data4


替换命令在替换多行中的文本时能正常工作，但默认情况下它是只替换每行中出现的第一处。
要让替换命令能够替换一行汇总不同地方出现的文本必须使用替换标记(substitution flag)
替换标记会替换命令字符串之后设置

s/pattern/replacement/flags


有４种可用的替换标记


数字，表明新文本将替换第几处模式匹配的地方
g,表明新文本将会替换所有匹配的文本；
p,表明原先行的内容要打印出来
w file,将替换的结果写到文件中

只替换第二行　　sed 's/test/trial/2' data4
替换全部　　　　sed 's/test/trial/g' data4

p替换标记会打印与替换命令中指定的模式匹配的行。这通常与sed的-n选项一起使用

sed -n 's/test/green~~~~/p' data5


-n选项将禁止sed编辑器输出。

ｗ替换标记会产生同样的输出，不会会将输出保存到指定文件中

sed -n 's/test/green~~~~/w  w.txt' data5

sed编辑器的正常输出是在STDOUT中，而只有那些包含匹配模式的行才会保存在指定的输出文件中。


２．替换字符

linux常常替换　正斜线(/)

sed编辑器允许选择其他字符来作为替换命令中的字符串分隔符

sed 's!/bin/bash!/bin/csh!' /etc/passwd

！感叹号被用作字符串分隔符，这样路径名就更容易阅读和理解了


１９．２．２　　使用地址


默认情况下，在sed编辑器中使用的命令会作用于文本数据的所有行。如果只想将命令作用于特定行或某些行，则必须用行寻址(line addressing)

在sed编辑器中有两种形式的行寻址
１．以数字形式表示行区间　　２．　用文本模式来过滤出行


[address] command


address {
command1
command2
command2}

sed编辑器会将指定的每条命令作用到匹配指定地址的行上。
１．数字方式的行寻址

当使用数字方式的行寻址时，可以用行在文本流中的行位置来引用。sed编辑器会将文本流中的第一行编号为１，然后继续按顺序为接下来的行分配行号

在命令汇总指定的地址可以是单个行号，或是起始行号，逗号以及结尾行号指定的一定区间范围内容的行。

sed '2s/dog/cat/' data1

上面sed编辑器只修改地址指定的第二行的文本。　这次使用行地址区间

sed '2,3s/dog/cat/' data1

如果想将命令作用到文本中从某行开始的所有行，可以用特殊地址－－美元符号

sed '2,$s/dog/cat/' data1


2. 使用文本模式过滤器


sed编辑器允许指定文本模式来过滤命令要作用的行。

/pattern/command


必须用正斜线将要指定的pattern封起来。sed编辑器会将命令作用到包含指定文本模式的行上

例如，指向修改用户user1的默认shell,可以使用sed命令

grep user001 /etc/passwd


sed '/user001/s/bash/csh~~~~~~~~/' /etc/passwd


该命令值作用到匹配文本模式的行上。虽然使用固定文本模式能帮你过滤特定的值

sed编辑器在文本模式中采用了一种正则表达式的特性来帮助你创建匹配效果更好的模式

正则表达式允许创建高级文本模式匹配表达式来匹配各种数据。这些表达式结合了一系列通配符，特殊字符以及固定
文本字符来生成能够匹配几乎任何形式文本的简练模式


３．　命令组合

如果需要在单行上执行多条命令，可以用花括号将多条命令组合在一起

sed编辑器会处理地址行处列出的每条命令


sed '2{
s/fox/elepant/
s/dog/cat/
}' data1


两条命令都会作用到该地址上。也可以在一组命令前指定一个地址区间

sed '3,${
s/brown/green~~/
s/lazy/act~~~~/
}' data1

sed编辑器会将所有命令作用到该地址区间内的所有行上

１９．２．３　　删除行

文本替换命令不是sed编辑器唯一的命令。如果需要删除文本流中的特定行，可以用删除命令

删除命令d，它会删除匹配指定寻址模式的所有行。如果忘记加入寻址模式的话，流中的所有文本行都会被删除


当和指定地址一起使用时，删除命令显然能发挥最大的功用。可以从数据流中删除特定的文本行，通过行号指定


sed '3d' data6
或通过特定行区间指定
sed '2,3d' data6

或通过特定额文件结尾字符


sed '3,$d' data6


sed　编辑器的模式匹配特性也适用于删除命令


sed '/number 1/d' data6

sed编辑器会删除掉包含匹配指定模式的行。　注意，sed编辑器不会修改原始文件。


也可以通过两个文本模式来删除某个区间内的行。你指定的第一个模式会“打开”行删除功能，第二个模式会“关闭”行删除功能。
sed编辑器会删除两个指定行之间的所有行(包括指定的行）

sed '/1/,/3/d' data6


如果你指定了一个从未在文本中出现的停止模式，数据流中的剩余行全部删除掉


因为删除功能在匹配到第一个模式的时候打开了，但是一直没有匹配到结束模式，所有整个数据流都被删除掉

１９．２．４　　插入和附加文本

sed编辑器允许向数据流插入和附加文本行。。

　插入(insert)命令(i) 会在指定行前增加一个心行
（附加)(append)命令(a)会在指定行后增加一个新行

它们不能在单个命令行上使用。你必须指定是要将行插入还是附加到另一行


sed '[address]command/new line'


new line　中的文本将会出现在sed编辑器输出中你指定的位置。记住，当使用插入命令时，文本会
出现在数据流文本的前面


echo "test line 2" | sed 'i\test line 1'

当使用附件命令时，文本会出现在数据流文本的后面

echo "test line 2" | sed 'a\test line 1'


在命令行界面提示符上使用sed编辑器时，你会看到次提示符来提醒输入新的行数据。
你必须在该行命令sed编辑器命令。一旦你输入了结尾的单引号，bash shell就会执行该命令


echo "test line2" | sed 'i\
test line 1'

这样能够给数据流中的文本起那么或后面添加文本

要向数据流行内部插入或添加数据，你必须用寻址来告诉sed编辑器你想让数据出现在什么位置。
可以在用这些命令时只指定一个行地址。可以匹配一个数字行号或文本模式，但不能用地址区间，
只能将文本插入或附加到单个行的前面或后面，而不是行区间的前面或后面

示例将一个新行插入到数据流第三行前

sed '3i\
this is an inserted len .' data6

示例将一个心行附加到数据流终中第三行后

sed '3a\
this is an inserted len .' data6



如果你有一个或多行数据流，想要将新行附加到数据流的末尾，只要用代表数据最后一行的美元符号即可


sed '$a\
this is an inserted len .' data6


同样的方法也适用于要在数据流起始位置增加一个新行。只要　在新行之前插入新行即可

要插入或附加多行文本，就必须对要插入或附加的新文本中的每一行使用反斜线，知道最后一行


sed '1i\
this is one line of new test.\
this is another line of new text.' data6



指定的两行都会被添加到数据流中


１９．２．５　　修改行


修改(change)命令允许修改数据流中整个文本的内容。它跟插入或附加命令的工作机制一样，你必须
在sed命令中单独指定新行


sed '3c\
this is a changed line of text.' data6


sed编辑器会修改第三行中的文本。也可以用文本模式来寻址


sed '/number 3/c\
this is a changed line of text.' data6


文本模式修改命令会修改它匹配的数据流中的任意文本行

sed 编辑器会用这一行文本来替换数据流中的两行文本，而不是逐一修改这两行文本


１９．２．６　　转换命令　

转换(transform)命令(y) 是唯一可以处理单个字符的sed编辑器命令。转换命令格式如下：

[address]y/incharts/outcharts/


转换命令会对incharts和outcharts值进行一对一的映射。incharts中的第一个字符会被转换为outcharts中的第一个字符，
第二个字符会被转换成outcharts中的第二个字符。这个映射过程会一直持续到处理完指定字符。如果incharts和outcharts的长度
不同，则sed编辑器会产生一条错误消息


转换命令是一个全局命令，它会文本行中找到的所有指定字符自动进行转换，而不会考虑它们出现的位置


echo "this 1 is a test of 1 try " |  sed 'y/123/456/'

sed编辑器转换了在文本行中匹配到的字符１的两个实例。

１９．２．７　　回顾打印

还有３个命令也能用来打印数据流中的信息

p命令用来打印文本行；
等号(=)命令用来打印等号；
l（小写字母）命令用来列出行

１．打印行

跟替换命令中的p标记类似，p命令可以打印sed编辑器输出中的一行。


echo "this is a test" |sed 'p'


它所做的就是打印已有的的数据文本。打印命令最常见的用法是打印包含匹配文本模式额行


sed -n '/number 3/p' data6


在命令上用-n选项，可以禁止输出其他行，只打印包含匹配文本模式的行

也可以用它来快速打印数据流中的某些航

sed  -n '2,3p' data6

如果需要在修改之前查看行，也可以使用打印命令，比如与替换或修改命令一起使用。可以创建一个脚本在修改行之前显示该行


sed -n '/3/{
p
s/line/test/p
}' data6


2.打印行号
等号命令会打印行在数据流中的当前行号。行号由数据流中的换行符决定。每次数据流中出现一个换行符，seb编辑器会认为一行问结束了


sed "=" data1


sed编辑器在实际的文本行出现之前打印行号

sed -n '/number 4/{
=
p
}' data6

利用-n选项，你可以让sed编辑器只显示包含匹配文本模式的行的行号和文本

３．列出行

列出(list)命令(1)可以打印数据流中的文本和不可打印的ASCII字符。

sed -n 'l' data9

制表符的位置使用\t来显示。行尾的美元符号表示换行符。如果数据流包含了转义字符，列出命令会在必要时用八进制来显示


19.2.8  使用sed处理文件

替换命令包含一些可以用于文件的标记。还有一些sed编辑器命令也可以实现同样的目标，不需要非得替换文本

１．写入文件


w命令用来向文件写入行。

[address]w filename


filename可以使用相对路径或绝对路径。运用sed编辑器的用户都必须有文件的写权限。地址可以是sed中支持的任意类型的寻址方式
，例如单个行号，文本模式，行区间或文本模式


示例　将数据流中的前两行打印到一个文本文件中


sed '1,2w test' data6

如果不想让行显示到STDOUT上，可以用sed命令的-n选项

sed  -n '1,2w test' data6


如果要根据一些公用的文本值从主文件中创建一份数据文件，比如下面的邮件列表中的，那w命令非常好用


sed -n '/Greenbirch/w GB' data11

sed编辑其会只将包含文本模式的数据行写入目标文件


２．从文件读取数据


前面已经了解在sed命令行上向数据流中插入或附加文本。读取(read)命令(r)允许你将一个独立文件中的
数据插入到数据流中

读取的格式
[address]r filename

filename可以使用相对路径或绝对路径。你在读取命令中使用地址区间，只能指定单独一个行号或文本模式地址。
sed编辑器会将文件中的文本插入到指定地址后

sed '3r data12' data6

如果你要在数据流的末尾添加文本，只需用美元符号地址符即可

sed '$r data12' data6


读取命令的另一个用法是和删除命令配合使用：使用另一个文件中的数据来替换文件中的占位文本。
假如，你有一份套用信件保存在文本文件中：


套用信件将通用占位文本LIST放在人物名单的位置。要在占位文本后插入名单，只需读取命令即可。
占位文本仍然会留在输出中。要删除占位文本的话，你可以用删除命令。


sed '/LIST/{
r data11
d
}' notice.std

现在占位文本已经被替换成立数据文件中的名单



