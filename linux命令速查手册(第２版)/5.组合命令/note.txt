
第５章　　组合命令


５．１　　连续运行多个命令
；

命令栈是将所有需要运行的命令放到shell中的一行上，每条命令之间用分号(;)隔开。然后
按顺序依次执行每个命令，只有一条命令结束运行(成功或失败)，才会运行下一条命令。
警告

请谨慎使用命令栈，特别是在删除或移动文件！


５．２　　仅在前面的命令成功运行式才运行下一条命令
&&

使用分号的命令栈是顺序执行命令的，而没有考虑它们的执行是否成功．分隔命令更好的是使用&&,这个同样是按顺序一次执行每个命令，但是只有前面一条命令运行完成之后，才会执行下一条命令(从技术上来讲，每条命令返回的退出状态码必须是０，系统才能运行下一条命令)．如果一条命令运行失败，整个命令链就会停止执行

几个例子Ｌ
关于apt,使用apt时，首先更新可用软件的列表，然后查找是否有用的升级．如果不能更新列表，显然显然就不必查找升级．

apt-get update && apt upgrade


如果使用ps2pdf命令把PostScript文件转换成PDF,打印生成的PDF文件，之后删除PostScript文件

ps2pdf foobar.ps && lpr foobar.pdf && foobar.ps


5.3  仅在前面的命令运行失败时才运行下一条命令

||　表示只有第一条命令失败(从技术上来讲，命令返回非0的退出状态码),第二条命令才运行．

当一个过程停止时，通常使用||符号向管理员发送警告．例如，为了确保特定的计算机启动并运行，管理员可能不时地使用ping命令对其进行查询，如果ping命令执行失败，则发送一封电子邮件给管理员，让其了解一下情况

ping -c 1 -w 15 -n 8.8.8.8 ||
{  
echo "server down " | mail -s "Server down" 291109028@qq.com
}

5.4 将一条命令的输出插入另一条命令

$()

命令替换将接受一条命令的输出，将其插入另一条命令中，如同直接输入这一输出的内容一样．可使用$()将最初运行的命令括起来(这条命令将产生插入的输出内容)

假设要把照片赋值出来，放入以当天日期命名的文件夹中

mkdir $(date "+%y-%m-%d")

在查看其他人编写的shell脚本时(在网络上很容易找到这些脚本)，这个命令会将会仓使用

注意

$()是可嵌套的，即可以在一个$()的内部放入另一个$()

５．５　　理解输入/输出流

linux　shell中有三种输入/输出流：标准输入流，标准输出流，和标准错误流．每种输入/输出流都有一个文件描述符(或数字标识符)，一个常用的缩写名称和一个一个常用的默认设备

例如，在键盘上输入时，其实就是输入发送到标准输入流，其缩写为stdin,标示为０
当计算机将输出显示到终端上时，使用的就是标准输出流，其缩写为stdout,标示为１
最后，如果计算机需要让你知道错误，并在终端上显示错误信息，使用的就是标准错误流，缩写为stderr，标示为２

让我们使用常见的命令ls查看这三种输入/输出流．在键盘上输入ls时，使用的是stdin，输入ls后按enter键，目录中文件和文件夹的列表借助stout显示．如果对不存在的文件夹运行ls命令，终端上出现的错误消息就是通过stderr提供的

三种输入/输出流

文件描述符(标识符)　　　　　名称　　　　　　　常见缩写名　　　　　　　　　典型的默认设备
０　　　　　　　　　　　　　标准输入　　　　　　　stdin                  键盘
１　　　　　　　　　　　　　标准输出　　　　　　　stdout                 终端
２　　　　　　　　　　　　　标准错误　　　　　　　stderr                 终端

在本章，将学习如何重定向输入和输出．例如，不是将输出显示在终端上，而是可将输出重定向到其他程序．或，不是从键盘接收输入，而是程序从文件获取输入．


５．６　　　将一条命令的输出作用另一条命令的输入

| （管道符）

unix由一些小片段松散连接在一起是一种基本原则．除了管道的概念，．管道就是键盘上的"|"符号，将其放在两条命令之间时，它可以将第一条命令的输出作为第二条命令的输入．|符号重定向stdtout,将它发送到第二条命令的stdin

一个例子，目前只需要知道less命令能够让用户在屏幕中一次查看文本文件的一页．如果在有许多文件的目录(如/usr/bin)上运行ls命令，显示的内容就会因为显示速度太快而不能阅读．但是如果将ls命令的输出通过管道符号发送给less命令，就可以在屏幕中以一次阅读一页的方式来查看结果

pwd 
ls -l ｜　less

使用管道符号将ls -ll的结果传递给less，就可以一次在屏幕上只查看结果的一页，这样操作起来要容易很多

接下来一个高级的例子，ps 和grep
其中ps命令，它能够列出正在运行的进程
grep命令，该命令可协助查找文件中与指定模式相匹配的行．

假设Firefox运行异常，因此你怀疑后台仍然有多个Firefox的副本在运行．ps命令会列出计算机中正在运行的每个进程，但是输出的结果可能会很长，而且在不断地变化．如果将ps的输出通过管道符号传递给grep命令，由其搜索firefox，这样，如果firefox确实还在运行，就可以立马判断出来
ps ux | grep firefox

注意

很多程序都能够用管道，但是并非都有

例如，文本编辑器vim会接管整个shell，因此键盘的所有输入都会直接发送给vim,而所有输出都显示在程序的某个位置．vim完全控制着shell,因此不能使用程序通过管道重定向它的输出．随着逐渐使用shell，就能知道如何识别不能使用管道的程序

５．７　　将命令的输出重定向到文件
>

通常输出显示在屏幕上，因此将屏幕称为标准输出(stdout)设备．如果不想将输出结果显示到屏幕上，则可以使用>(大于号)字符将输出放入文件中．

ls -lr > a.txt

注意
在使用>之前，文件a.txt并不存在．使用>将输出重定向到并不存在的文件时，就会创建这个文件．注意，如果文件a.txt已经存在，该文件就会被覆盖

警告

使用重定向时要十分谨慎，因为这有可能损坏原来保存重要内容的文件

５．８　　　防止重定向时覆盖文件

set -o noclobber

有一个办法可以放置重定向是覆盖文件，即使用noclobber选项．如果将noclobber的值设置为on,bash就不允许重定向覆盖已经存在的文件(除非得到用户的明确许可)．要开启noclobber,使用如下命令
set -o noclobber

从现在起，如果要使用重定向并覆盖文件，应该用>| 代替 >

如果决定不适用noclobber,可以再次将其关闭

set +o noclobber

(-o是开启，＋o是关闭，在此并没有写错代码)
要永久开启noclobber选项，需要在.bashrc文件中增加一行：set -o noclobber

5.9  将命令的输出追加到文件中
>>

前面介绍>符号可以将输出从stdout重定向到文件．例如，可以容易的将date命令的输出重定向到文件：

date > time.txt

记住，使用>重定向时，如果文件不存在，就会创建一个新文件：如果文件已经存在，则会覆盖已有的文件．但是，如果使用>>，就会把输出追加到指定文件的末尾(如果文件不存在，就会创建它)

警告

请谨慎使用>>,如果无意间输入>,就不是执行追加，而是覆盖文件

5.10  将文件用作命令的输入

<

通常通过键盘提供命令的输入，因此将键盘成为标准输入(stdin)设备，与将stdout重定向到文件一样，也可以重定向stdin,使其接受来自文件而不是键盘的输入．
有些命令不能将文件作参数，在这种情况下，<(小于号)就是所需要的解决办法，通常在编写脚本时有必要使用此方法，


例如，tr命令无法将文件作为输入；相反，tr仅从stdin读取．但是，如果希望将一个文件用于tr命令，应该如何操作？好消息是，你可以重定向stdin

假设编辑想我发送了一个文本文件，其中包含一些命令列表．使用tr和重定向的stdin来把大写变小写

tr 'A-Z' 'a-z < time.txt

文件time.txt用于输入，而tr进行处理．注意，tr将结果输出到stdout而非文件．这是符合预期的情况．该方法并不是非常有用的．但是还是没有改变原文件


５．１１　　结合使用输入和输出重定向

[command]  <[file] > [output]

tr 'A-Z''a-z <time.txt>time＿lower.txt

当然，你可以立刻使用mv重定向新的文件，使其具有与旧文件相同的名称．同样，可以使用&&将mv命令与使用tr命令完成的操作链接起来．只要确保新的文件包含正确的输出，就可以删除旧文件



５．１２　　将输出同时发送到文件和stdout

tee
如果要同时写入文件和stdout，应该使用tee命令
tee命令将输出拆分为两个流：一个流传送到stdout,另一个流同时传送到文件(该命令由此得名：将输出拆分为两个流，就像水管工的三通(tee);)

ls -lr | tee c.txt

ls命令执行操作时，就会在stdout上看到结果，同时，tee命令确保将这些相同的结果写入文件

请注意，如果写入结果的文件已经存在，则系统会使用tee提供的新数据覆盖该文件．如果要改为将输出追加到文件，可以使用-a选项

甚至可以将tee命令的结果通过管道传送到另一条命令．
sort命令就是这样的一个例子
-r选项可颠倒排序后的结果
一旦掌握了这个方法，就可以衍生出无限的可能