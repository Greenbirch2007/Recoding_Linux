1.1 一切皆文件

在linux,一切都是文件，文件文档当然是文件。目录也是文件，不过是特殊型的文件，包含有其他文件的信息
磁盘驱动起则是庞大的文件。网络连接和硬盘设备都是文件，甚至运行中的进程也是文件
他们都是一文件的形式表示出来

对于linux来说，文件仅仅是位和字节流。在linux中，文本文档和网络连接都是文件；
文本编辑器知道如何操作文本文档，而互联网应用程序可识别网络连接


１．２　　文件名最大长度

linux文件名的长度最多可恶意为２５５个字符。实际上，将文件名控制在少于８０个字符较为合适


１．３文件名区分大小写

区分大小写也意味着必须准备无误地输入命令和文件名。如果要删除文件，则不能输入RM.Rm,
而必须准确输入rm.
linux强制要求精确性，而精确性确实有必要遵从。


１．４　名称中应避免使用的特殊字符


在命名文件和目录时，每个操作系统都会有一些明确禁止使用的字符。首先要明确安全的字符

（１）　数字
（２）　字母(大小写)
（３）　圆点(.)---大多数命令行和GUI环境会隐藏作为文件或目录名第一个字符的圆点
（４）　下划线(_)

/字符绝对不能用，因为它是用来分割目录和文件。
可以使用下划线来代替正斜杠，或讲所有单词放在一起，也可以使用连字符('-')

如何在文件名中使用空格？如何使用*和?字符，'和''字符

可以在相关字符前面放一个反斜杠(\)进行转义

１．５　通配符及其含义

设想有１２张图片和一个文本文件

可以使用通配符来匹配一次指定多个文件

有４种通配符

（１）*（星号）
（２) ?(问号）
（３）　[](方括号
(4) {} (波形括号，也称为大括号，因此又叫大括号扩展)

注意：波形括号与其他通配符不同。bash将前三个通配符进行的转换分类为文件名扩展，而波形括号提供的转换是大括号扩展。
前三个通配符仅匹配现有的文件。波形括号不仅可以用于匹配现有文件，还可以用于新建文件



通配符*匹配０个或多个任意字符
通配符?匹配单个字符
通配符[]可匹配一组单个字符(例如[12],匹配１或２,但是不匹配１２３)
连字符在在一定范围内的字符(例如[1-3],它匹配１，２或３)
通配符{}也进行两种匹配：字符串和范围。如果要对字符串使用大括号扩展，则必须使用逗号分隔列表，
然后bash会列出所有可能的组合
然而，字符串列表必须是一个实际的列表，因此不能仅适用{jpg},该命令将不会起作用

大括号扩展也用于生成文件以及匹配它们。用于介绍目录的mkdir命令。在下面的示例中，我们使用大括号
快速扩展创建多个目录
没有匹配现有的文件或目录(这是*,?和[]的限制所在）；相反，使用波形括号告诉mkdir待新建目录的名称

注意，[]匹配单个字符，而{}用于匹配字符串－－－，字符串可以是单个字符!
{}处理的是字符串，注意区分方括号和波形括号的左右
至于范围，该功能可指定{和}内的开始和结束字符。这些字符可是数字或字母，但不能同时使用数字和字母，并且
必须用另个句点分隔。

可以组合两个大括号扩展实例，这回匹配或创建所有可能的组合
在结束介绍通配符之前，有必要知道可以根据需要组合使用任何和所有的通配符


１．６　影响命令行的特殊文件

本书将经常引用一些主目录中隐藏的启动脚本(隐藏是因为这些脚本都一圆点开头，从而在口头上通常将他们称为圆点文件)
每个人对于shell都有不同的需求，因此应该自定义这些文件以满足自己的特定需求

在介绍启动脚本之前，首先需要区分分类shell的两种方式，登录和非登录以及交互和非交互模式
登录shell是操作系统在你本地登录或通过ssh登录时启动的，在你启动登录shell时，bash通过
读取/etc/profile配置shell,此配置会应用与每个用户
然后bash按照顺序查找如下文件，在找到的第一个文件处停止：

~/.bash_profile：类似于下面的.profile,但仅适用于bash
~/.bash_login
~/.profile:与原始Bourne shell sh兼容，因此任何Bourne兼容shell都将使用此文件

这些文件设置诸如环境变量这样的参数，然后将这些环境变量相信爱传递到由登录shell产生的任何进程
，包括子shell(与shell脚本一样，在某个shell启动另一个shell时就会创建子shell)
除了环境变量之外，这些文件也可以引用在登录时自动配置或运行的基于shell的程序

非登录shell是指你不会登录到其中的shell
shell也可以分为交互或非交互。交互shell会响应你输入的命令(就是响应你的交互）
并将输出发送到STDOUT和STDERR.非交互shell将由shell脚本使用，在使用期间你不会真正输入命令病
并直接取回输出

注意，shell脚本完全有可能操作交互shell,同样，非交互shell也可能响应命令，但是这种
情况很少见


在启动交互式非登录shell时，bash会读取并执行已经存在的/etc/bash.bashrc,该操作会应用于
使用bash的每位用户。接下来，bash将每位用户主目录中的.bashrc作为来源。你应将该文件用于
bash特有的设置，如各种选项和提示


还可在.bashrc中放入别名和函数但是在掌握更多信息之后，将它们单独放入.bash_aliases则是不错
的想法(或.bash_funtions)
若要调用.bash_aliases，可在.bashrc中添加如下命令

if [-f ~/.bash_aliases ]; then
  source ~/.bash_aliases
fi

如果.bash_aliases存在，则将其作为来源；如果该文件不存在，则会跳过。这是需要创建和使用的
重要文件，本书通篇都会看到该文件

当一个登录shell最终退出时，bash读取并执行已经存在的~/.bash_logout.该文件不常使用
但是在使用它的用户中，添加到其中最流行命令之一是clear

提示：

如果要进一步自定义bash环境，可研究~/.inputrc的各个原乡。从技术角度看，在编辑
~/.inputrc时并不是自定义bash;你自定义的是bash用于编辑命令行的读取行库

１．７　如果屏幕上有过多内容，请重置


clear  它没有参数或选项，clear并不会消除你的历史记录它只是清除你的屏幕显示

history用户查看和运行之前的命令
