第８章　拥有者和权限


linux最初设计为多用户操作系统(这一点不同于windows,后者是单用户操作系统，而这是很多windows目前安全问题的根源)

多用户操作系统意味着不同的用户可以同时在系统中活跃，如创建文件，删除目录以及读取不同的项．为了防止用户之间互相产生影响以及
避免用户对底层操作系统自身的破坏，一个权限方案就要建立．
通过linux权限管理的精髓所在，不管是个人使用的工作站还是多人访问的服务器，最好使用linux



8.1  成为另一个用户

su username

su命令(代表切换用户(switch user)),而不是成为超级用户．su可以让一个用户临时扮演另一个用户的角色．
如果你想要快速成为shell中的root用户，运行一到两个命令，然后恢复自己的普通非root用户身份，就要经常
使用该命令


调用su，后面跟着你想要扮演的身份的用户，然后输入用户的密码，而非你自己的密码

whoami表明你的shell身份

8.2 成为另一个用户并使用其环境变量

su -l

su命令仅仅在你知道用户密码的情况下才能使用
如果知道密码，就可以切换到该用户在/etc/passwd文件中指定的shell,如sh,zsh或bash

大多数linux用户仅使用默认的bash　shell,

使用 -l就彻底改变了当前用户的环境变量


８．３　　成为root用户

su

su用于成为root用户，可以使用su root命令成为root用户，或su -l root , 或sudo su　或su 即可


８．４　　成功root用户并使用其环境变量

su -

单独输入su等同于su root,表明你不仅名义上成为root用户，也会拥有该用户的权限，单仅限于此
在后台，你的非root用户环境变量仍然在起作用

只要使用su - ,你不仅会成为root用户，还会使用该用户的环境变量

在su后面附加-等同与输入su -l root,但是减少了输入量．你拥有了root用户的身份，权限和环境
这意味着你完全成为了root用户


８．５　　更改文件或目录所属的用户组

chgrp

默认情况下，在几乎每种linux系统中，当创建新的文件(或目录)时，文件的拥有者和用户组就是你自己

注意
在创建文件时，用户UID（用户ID号）成为文件的拥有者，而用户的GID(组ID号)则成为文件的用户组


但是如果你是计算机中的admins用户组的成员，并且想让该组的其他成员也能够使用自己的脚本，因此可以运行它，应该如何操作？
groups命令　用于查看用户组
在这种情况下，需要使用chgrp命令将用户组从scott更改为admins


运行chgrp命令时，可以使用用户组的名称或数字ID．如何找到与讴歌用于组相关的数字ID呢？最简单的方法就是对/etc/group使用cat命令，这个文件保存了计算机中各个用户组的信息


cat /etc/group

只有用户组的成员才能够更改这个组的权限．其他用户可以使用chgrp命令让文件或目录的用户组成为admins,,但是也只有admins的组成员可以，其他用户不行

８．６　　递归更改目录所属的用户组


chgrp -R

如果要更改目录中多个文件的用户组，可以使用通配符，如果要更改目录及其所有子目录的内容，可使用-R选项

chgrp -R family */*

ls -l *

警告

如果使用chgrp -R family *，则不会更改/home/scott/pictures/libby目录中的任何点文件．然而，
不应该使用chgrp -R family .*命令　　虽然该文件能够更改当前目录中的所有点文件，但是.*与..匹配，因此父目录中的所有文件
也会被更改，而这或许并不是你想要的结果


８．７　　更改文件和目录的拥有者

chown

更改文件的用户固然重要，但更常见的是更改文件的拥有者．要修改用户组，使用的是chgrp命令；而要更改拥有者，则应该使用chown命令．
注意，只有root用户(或使用sudo拥有root身份的用户,)可以更改文件的拥有者．如果你不是root用户，就不能更改自己文件的拥有者

提示

使其他人有权访问你所拥有文件的另一种方式是，以root用户身份使用useradd或usermod命令将所需的用户添加到控制这些文件的用户组．注意，必须是root用户(或使用sudo命令拥有root身份的用户)执行此操作

提到的chgrp命令相关要点也适用于chown命令．chgrp命令使用的是用户名或其数字ID．用户的数字ID可以通过运行cat /etc/passwd命令(或运行id命令)来查看，
其中，第一个数字是用户的数字ID(第二个数字是与用户关联的主用户组的数字ID)


警告

如果用户或用户组的名称中有冒号，应该如何处理？只要在冒号前输入反斜杠字符，它能够"转义"其后的字符，告诉系统这个只是个冒号，并不是用户和用户组名称之间的分隔符：

chown deis:fam\:aer  t.txt
这样做虽然有效，但是最好不要在用户和用户组名称中使用冒号

chown能够完成chgrp的所有功能，

注意

在分隔用户和用户组时，实际上可以使用冒号(:)字符

８．９　　理解权限的基础

chmod命令可用于更改与文件或目录关联的权限，有三组用户可使用文件或目录：实际拥有者(也称为文件的用户)，用户组以及系统中的其他人

用户及其缩写

用户组　　　　　　　　缩写

用户(拥有者)　　　　　u
用户组　　　　　　　　g
其他人　　　　　　　　o


又有三种属性：读，写，执行分别表示为r,w,x

注意

root用户一直能够对任何文件或目录进行任意操作，下面就使用chmod命令更改文件和目录的权限

８．１０　　用字母表示法修改文件和命令的权限

chmod [ugo] [+-=] [rwx]

chmod命令可以结合两种表示法使用：字母或数字
要影响的用户组(u,g,o),后跟加号(+)以授予权限，跟减号(-)以删除权限，跟等号（=）以设置确切的权限

假定让用户组的成员能够执行

chomd g+w a.txt

如果要让用户组以及所有其他用户都有文件的写入权限

chmod go+w a.txt

想要所有用户(拥有者，用户组以及所有其他人)都有读写权限，要用如下命令


chmod a=rw a.txt

如果要删除用户组和其他用户的权限，不允许更改文件，甚至还要确保其他人无法读取文件

chmod o-r  a.txt

除了使用-,也可以使用=

注意最后的chmod命令，让o等于空白，相当于删除了系统中所有其他用户的所有权限．现在就兼具了速度和效率

字母系统的一个缺点：如果要更改两个或更多的用户组，并且每个用户的修改更不相同，则最终至少要运行运行chmod命令两次

８．１１　　用数字权限修改文件和目录的权限

chmod [0-7] [0-7] [0-7]

数字权限(也成为八进制权限)是基于二进制数字系统而创建的．读取(r)的值为４，写入(w):2 ,执行(x):1

１．用户具有读取和写入文件或目录的权限  4+2+0=6
2. 用户具有读取和执行文件的权限　４＋０＋１＝５
３．　用户具有读取，写入及执行目录的权限　4+2+1=7


数字　　　　　　　ls -l的表示法
０　　　　　　　　　　　　---
１                      --x
２                      -w-
３                      -wx
４                      r--
５                      r-x
６                      rw-
７                      rwx

chmod 400    拥有者能够读取，其他任何人不能进行任何操作
chmod 644     所有人都能够读取，单只有拥有者才能编辑
chmod 660     拥有者和用户组能够读写，其他人不能进行任何操作
chmod 664     所有人都能读取，但只有拥有者和用户组能够编辑
chmod 700      拥有者能够读取，写入和执行，其他用户不能进行任何操作
chmod 744     所有人都能读取，但只有拥有者才能编辑和执行
chmod 755     所有人都能读取和执行，但只有所有者才能编辑
chmod 777    　梭人都能读取，编辑和执行

chmod 666 a.txt

8.12  递归地修改权限

chmod  -R　可以快速更改数百个文件系统的权限

chgrp -R  family * 选出用户组
chmod -R 660 *  批量修改权限


权限被拒绝

如果文件是可执行的，那么它就可以作为程序来运行：单目录必须是可执行的，才能允许用户访问其内部，读取其中的文件和子目录．
运行chmod　－R 660 *　命令删除了所有内容(包括文件和目录)的x权限．当chmod命令报告它已经完成执行时，因为它不能读取目录中的内容(这些目录不再是可执行的)．所有不能成功完成操作

可以使用通配符来运行chmod命令，让它只影响特定类型的文件
chmod -R 660 *.txt
这个命令只是修改的文件，而不是目录，所以不会欧任何问题
如果子目录里面还有很多子目录，或需要处理的文件太多，要使用find命令，先找出所有不是目录的文件，然后更改它们的权限．


8.13  设置和清除suid

chmod u[+-]s
chmod 4[0-7][0-7][0-7]

suid，它只适用于可执行文件，从不用于目录

在设置suid以后，用户就可以使用拥有者的权限执行这个文件，使用suid的一个常见例子是passwd命令的权限设置，这个命令可以让用户设置和更改它们的秘密

可以看到passwd命令设置为suid权限，因为在用户的x权限应在的位置，现在有一个s权限．

passwd的拥有者是root用户，但是有必要让普通用户也能运行这个命令，否则它们就不能修改自己的密码

为了让所有人都能执行passwd命令，需要为用户，组及系统的所有其他用户都设置x权限．应该是将passwd设成suid root，这样所有人都能以root用户的权限运行这个命令


注意

s或S都可用来表示设置了suid权限，在设置suid之前，如果拥有者已经具执行权限(x),就会看到s;而S则表示在设置sudi之前，拥有者没有执行的权限．最终的结果是一样的，但是字母的大小写能够表明最初的权限


提示

linux计算机上有多少程序设置为了suid权限

find / -xdev -perm -4000 -type f -print0 | xargs -0 ls -l | wc -l  (s)

使用u-来代替u+即可删除suid

chmod u-s a.txt

要删除suid，只要将这一位数字设置为0,就能将权限设置回默认状态，即不设置suid权限

注意，suid该特殊权限不会作用于解释程序，即以#!开头额任何脚本


８．１４　　设置和清除sgid

chmod g[+-]s
chmod 2[0-7][0-7][0-7]


sgid权限既适用于文件，也适用于目录．对于文件,sgid与suid的功能类似，但是用户现在可以通过用户用户组的权限执行文件，而不是
以拥有者的权限执行文件

当应用于目录时,sgid的操作：任何随后在该目录中创建的文件都属于分配给该目录的组


然而，如果将共享目录设置为sgid,那么任何在该目录中创建的新文件的拥有者仍然是创建该文件的用户，单该文件自动地被分配为共享目录的用户组

注意

如果使用cp命令将文件复制到sgid目录中，新复制的文件能够获得该目录的用户组，但是，如果用mv命令将文件移动到sgid目录中，文件将仍然保持它当前所属的用户组，并不会获得新目录的用户组．最后，如果用mkdir命令在sgid目录中创建新目录，该目录不仅能够继承sgid目录所属的用户组，其本身也将拥有sgid权限



８．１５　设置和清除　　　sticky bit

chmod [+-]t
chmod 1[0-7][0-7][0-7]


